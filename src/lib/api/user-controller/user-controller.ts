/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryClient,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
    UseSuspenseQueryOptions,
    UseSuspenseQueryResult,
} from '@tanstack/react-query'

import type {
    ApiResponseVoid,
    CurrentUserResponse,
    UserImageUploadRequest,
} from '../endpoints.schemas'

import { customInstance } from '.././mutator/custom-instance'
import type { ErrorType, BodyType } from '.././mutator/custom-instance'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const uploadAvatar = (
    userImageUploadRequest: BodyType<UserImageUploadRequest>,
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
) => {
    const formData = new FormData()
    formData.append(`file`, userImageUploadRequest.file)

    return customInstance<ApiResponseVoid>(
        {
            url: `http://localhost:8080/api/user/avatar`,
            method: 'POST',
            headers: { 'Content-Type': 'multipart/form-data' },
            data: formData,
            signal,
        },
        options
    )
}

export const getUploadAvatarMutationOptions = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof uploadAvatar>>,
        TError,
        { data: BodyType<UserImageUploadRequest> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof uploadAvatar>>,
    TError,
    { data: BodyType<UserImageUploadRequest> },
    TContext
> => {
    const mutationKey = ['uploadAvatar']
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation &&
          'mutationKey' in options.mutation &&
          options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined }

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof uploadAvatar>>,
        { data: BodyType<UserImageUploadRequest> }
    > = (props) => {
        const { data } = props ?? {}

        return uploadAvatar(data, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type UploadAvatarMutationResult = NonNullable<
    Awaited<ReturnType<typeof uploadAvatar>>
>
export type UploadAvatarMutationBody = BodyType<UserImageUploadRequest>
export type UploadAvatarMutationError = ErrorType<unknown>

export const useUploadAvatar = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof uploadAvatar>>,
            TError,
            { data: BodyType<UserImageUploadRequest> },
            TContext
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseMutationResult<
    Awaited<ReturnType<typeof uploadAvatar>>,
    TError,
    { data: BodyType<UserImageUploadRequest> },
    TContext
> => {
    const mutationOptions = getUploadAvatarMutationOptions(options)

    return useMutation(mutationOptions, queryClient)
}
export const deleteAvatar = (
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<ApiResponseVoid>(
        { url: `http://localhost:8080/api/user/avatar`, method: 'DELETE' },
        options
    )
}

export const getDeleteAvatarMutationOptions = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteAvatar>>,
        TError,
        void,
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteAvatar>>,
    TError,
    void,
    TContext
> => {
    const mutationKey = ['deleteAvatar']
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation &&
          'mutationKey' in options.mutation &&
          options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined }

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteAvatar>>,
        void
    > = () => {
        return deleteAvatar(requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteAvatarMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteAvatar>>
>

export type DeleteAvatarMutationError = ErrorType<unknown>

export const useDeleteAvatar = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof deleteAvatar>>,
            TError,
            void,
            TContext
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseMutationResult<
    Awaited<ReturnType<typeof deleteAvatar>>,
    TError,
    void,
    TContext
> => {
    const mutationOptions = getDeleteAvatarMutationOptions(options)

    return useMutation(mutationOptions, queryClient)
}
export const getCurrentUser = (
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
) => {
    return customInstance<CurrentUserResponse>(
        { url: `http://localhost:8080/api/user/me`, method: 'GET', signal },
        options
    )
}

export const getGetCurrentUserQueryKey = () => {
    return [`http://localhost:8080/api/user/me`] as const
}

export const getGetCurrentUserQueryOptions = <
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getCurrentUser>>,
            TError,
            TData
        >
    >
    request?: SecondParameter<typeof customInstance>
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getCurrentUser>>
    > = ({ signal }) => getCurrentUser(requestOptions, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUser>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCurrentUserQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCurrentUser>>
>
export type GetCurrentUserQueryError = ErrorType<unknown>

export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCurrentUser>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCurrentUser>>,
                    TError,
                    Awaited<ReturnType<typeof getCurrentUser>>
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCurrentUser>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getCurrentUser>>,
                    TError,
                    Awaited<ReturnType<typeof getCurrentUser>>
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCurrentUser>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetCurrentUser<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getCurrentUser>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
} {
    const queryOptions = getGetCurrentUserQueryOptions(options)

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<
        TData,
        TError
    > & { queryKey: DataTag<QueryKey, TData, TError> }

    query.queryKey = queryOptions.queryKey

    return query
}

export const getGetCurrentUserSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = ErrorType<unknown>,
>(options?: {
    query?: Partial<
        UseSuspenseQueryOptions<
            Awaited<ReturnType<typeof getCurrentUser>>,
            TError,
            TData
        >
    >
    request?: SecondParameter<typeof customInstance>
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey()

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getCurrentUser>>
    > = ({ signal }) => getCurrentUser(requestOptions, signal)

    return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUser>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCurrentUserSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getCurrentUser>>
>
export type GetCurrentUserSuspenseQueryError = ErrorType<unknown>

export function useGetCurrentUserSuspense<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = ErrorType<unknown>,
>(
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getCurrentUser>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCurrentUserSuspense<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getCurrentUser>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCurrentUserSuspense<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getCurrentUser>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetCurrentUserSuspense<
    TData = Awaited<ReturnType<typeof getCurrentUser>>,
    TError = ErrorType<unknown>,
>(
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getCurrentUser>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
} {
    const queryOptions = getGetCurrentUserSuspenseQueryOptions(options)

    const query = useSuspenseQuery(
        queryOptions,
        queryClient
    ) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>
    }

    query.queryKey = queryOptions.queryKey

    return query
}
