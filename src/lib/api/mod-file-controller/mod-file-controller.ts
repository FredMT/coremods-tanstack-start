/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiResponseModFileEditResponse,
  ApiResponseModFileUploadResponse,
  ModFileEditRequest,
  UploadModFileBody,
  UploadModFileParams
} from '../endpoints.schemas';





export const editModFile = (
    modId: number,
    fileId: number,
    modFileEditRequest: ModFileEditRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseModFileEditResponse>> => {
    
    
    return axios.default.put(
      `http://localhost:8080/api/v1/mods/${modId}/files/${fileId}`,
      modFileEditRequest,options
    );
  }



export const getEditModFileMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editModFile>>, TError,{modId: number;fileId: number;data: ModFileEditRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof editModFile>>, TError,{modId: number;fileId: number;data: ModFileEditRequest}, TContext> => {

const mutationKey = ['editModFile'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editModFile>>, {modId: number;fileId: number;data: ModFileEditRequest}> = (props) => {
          const {modId,fileId,data} = props ?? {};

          return  editModFile(modId,fileId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditModFileMutationResult = NonNullable<Awaited<ReturnType<typeof editModFile>>>
    export type EditModFileMutationBody = ModFileEditRequest
    export type EditModFileMutationError = AxiosError<unknown>

    export const useEditModFile = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editModFile>>, TError,{modId: number;fileId: number;data: ModFileEditRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof editModFile>>,
        TError,
        {modId: number;fileId: number;data: ModFileEditRequest},
        TContext
      > => {

      const mutationOptions = getEditModFileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const uploadModFile = (
    modId: number,
    uploadModFileBody: UploadModFileBody,
    params: UploadModFileParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseModFileUploadResponse>> => {
    
    const formData = new FormData();
formData.append(`archiveFile`, uploadModFileBody.archiveFile)

    return axios.default.post(
      `http://localhost:8080/api/v1/mods/${modId}/files`,
      formData,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getUploadModFileMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadModFile>>, TError,{modId: number;data: UploadModFileBody;params: UploadModFileParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof uploadModFile>>, TError,{modId: number;data: UploadModFileBody;params: UploadModFileParams}, TContext> => {

const mutationKey = ['uploadModFile'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadModFile>>, {modId: number;data: UploadModFileBody;params: UploadModFileParams}> = (props) => {
          const {modId,data,params} = props ?? {};

          return  uploadModFile(modId,data,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadModFileMutationResult = NonNullable<Awaited<ReturnType<typeof uploadModFile>>>
    export type UploadModFileMutationBody = UploadModFileBody
    export type UploadModFileMutationError = AxiosError<unknown>

    export const useUploadModFile = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadModFile>>, TError,{modId: number;data: UploadModFileBody;params: UploadModFileParams}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof uploadModFile>>,
        TError,
        {modId: number;data: UploadModFileBody;params: UploadModFileParams},
        TContext
      > => {

      const mutationOptions = getUploadModFileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    