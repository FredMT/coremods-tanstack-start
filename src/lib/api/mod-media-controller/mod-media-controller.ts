/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiResponseImage,
  ApiResponseListImage,
  ApiResponseListYouTubeVideoResponse,
  ApiResponseVoid,
  ApiResponseYouTubeVideoResponse,
  UploadHeaderImageBody,
  UploadModImageBody,
  YouTubeVideoRequest,
  YouTubeVideoUpdateRequest
} from '../endpoints.schemas';





/**
 * Update YouTube video title and description
 * @summary Update YouTube video
 */
export const updateYouTubeVideo = (
    gameModId: number,
    videoId: number,
    youTubeVideoUpdateRequest: YouTubeVideoUpdateRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseYouTubeVideoResponse>> => {
    
    
    return axios.default.put(
      `http://localhost:8080/api/v1/mods/${gameModId}/youtube-videos/${videoId}`,
      youTubeVideoUpdateRequest,options
    );
  }



export const getUpdateYouTubeVideoMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateYouTubeVideo>>, TError,{gameModId: number;videoId: number;data: YouTubeVideoUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateYouTubeVideo>>, TError,{gameModId: number;videoId: number;data: YouTubeVideoUpdateRequest}, TContext> => {

const mutationKey = ['updateYouTubeVideo'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateYouTubeVideo>>, {gameModId: number;videoId: number;data: YouTubeVideoUpdateRequest}> = (props) => {
          const {gameModId,videoId,data} = props ?? {};

          return  updateYouTubeVideo(gameModId,videoId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateYouTubeVideoMutationResult = NonNullable<Awaited<ReturnType<typeof updateYouTubeVideo>>>
    export type UpdateYouTubeVideoMutationBody = YouTubeVideoUpdateRequest
    export type UpdateYouTubeVideoMutationError = AxiosError<unknown>

    /**
 * @summary Update YouTube video
 */
export const useUpdateYouTubeVideo = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateYouTubeVideo>>, TError,{gameModId: number;videoId: number;data: YouTubeVideoUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateYouTubeVideo>>,
        TError,
        {gameModId: number;videoId: number;data: YouTubeVideoUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateYouTubeVideoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Delete a YouTube video link
 * @summary Delete YouTube video
 */
export const deleteYouTubeVideo = (
    gameModId: number,
    videoId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.delete(
      `http://localhost:8080/api/v1/mods/${gameModId}/youtube-videos/${videoId}`,options
    );
  }



export const getDeleteYouTubeVideoMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteYouTubeVideo>>, TError,{gameModId: number;videoId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteYouTubeVideo>>, TError,{gameModId: number;videoId: number}, TContext> => {

const mutationKey = ['deleteYouTubeVideo'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteYouTubeVideo>>, {gameModId: number;videoId: number}> = (props) => {
          const {gameModId,videoId} = props ?? {};

          return  deleteYouTubeVideo(gameModId,videoId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteYouTubeVideoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteYouTubeVideo>>>
    
    export type DeleteYouTubeVideoMutationError = AxiosError<unknown>

    /**
 * @summary Delete YouTube video
 */
export const useDeleteYouTubeVideo = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteYouTubeVideo>>, TError,{gameModId: number;videoId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteYouTubeVideo>>,
        TError,
        {gameModId: number;videoId: number},
        TContext
      > => {

      const mutationOptions = getDeleteYouTubeVideoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieve all YouTube videos for a mod
 * @summary Get YouTube videos
 */
export const getYouTubeVideos = (
    gameModId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseListYouTubeVideoResponse>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/api/v1/mods/${gameModId}/youtube-videos`,options
    );
  }


export const getGetYouTubeVideosQueryKey = (gameModId?: number,) => {
    return [`http://localhost:8080/api/v1/mods/${gameModId}/youtube-videos`] as const;
    }

    
export const getGetYouTubeVideosInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getYouTubeVideos>>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetYouTubeVideosQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getYouTubeVideos>>> = ({ signal }) => getYouTubeVideos(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(gameModId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetYouTubeVideosInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getYouTubeVideos>>>
export type GetYouTubeVideosInfiniteQueryError = AxiosError<unknown>


export function useGetYouTubeVideosInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getYouTubeVideos>>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getYouTubeVideos>>,
          TError,
          Awaited<ReturnType<typeof getYouTubeVideos>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetYouTubeVideosInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getYouTubeVideos>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getYouTubeVideos>>,
          TError,
          Awaited<ReturnType<typeof getYouTubeVideos>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetYouTubeVideosInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getYouTubeVideos>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get YouTube videos
 */

export function useGetYouTubeVideosInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getYouTubeVideos>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetYouTubeVideosInfiniteQueryOptions(gameModId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetYouTubeVideosQueryOptions = <TData = Awaited<ReturnType<typeof getYouTubeVideos>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetYouTubeVideosQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getYouTubeVideos>>> = ({ signal }) => getYouTubeVideos(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(gameModId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetYouTubeVideosQueryResult = NonNullable<Awaited<ReturnType<typeof getYouTubeVideos>>>
export type GetYouTubeVideosQueryError = AxiosError<unknown>


export function useGetYouTubeVideos<TData = Awaited<ReturnType<typeof getYouTubeVideos>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getYouTubeVideos>>,
          TError,
          Awaited<ReturnType<typeof getYouTubeVideos>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetYouTubeVideos<TData = Awaited<ReturnType<typeof getYouTubeVideos>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getYouTubeVideos>>,
          TError,
          Awaited<ReturnType<typeof getYouTubeVideos>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetYouTubeVideos<TData = Awaited<ReturnType<typeof getYouTubeVideos>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get YouTube videos
 */

export function useGetYouTubeVideos<TData = Awaited<ReturnType<typeof getYouTubeVideos>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetYouTubeVideosQueryOptions(gameModId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetYouTubeVideosSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getYouTubeVideos>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetYouTubeVideosQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getYouTubeVideos>>> = ({ signal }) => getYouTubeVideos(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetYouTubeVideosSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getYouTubeVideos>>>
export type GetYouTubeVideosSuspenseQueryError = AxiosError<unknown>


export function useGetYouTubeVideosSuspense<TData = Awaited<ReturnType<typeof getYouTubeVideos>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetYouTubeVideosSuspense<TData = Awaited<ReturnType<typeof getYouTubeVideos>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetYouTubeVideosSuspense<TData = Awaited<ReturnType<typeof getYouTubeVideos>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get YouTube videos
 */

export function useGetYouTubeVideosSuspense<TData = Awaited<ReturnType<typeof getYouTubeVideos>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetYouTubeVideosSuspenseQueryOptions(gameModId,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetYouTubeVideosSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getYouTubeVideos>>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetYouTubeVideosQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getYouTubeVideos>>> = ({ signal }) => getYouTubeVideos(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetYouTubeVideosSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getYouTubeVideos>>>
export type GetYouTubeVideosSuspenseInfiniteQueryError = AxiosError<unknown>


export function useGetYouTubeVideosSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getYouTubeVideos>>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetYouTubeVideosSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getYouTubeVideos>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetYouTubeVideosSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getYouTubeVideos>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get YouTube videos
 */

export function useGetYouTubeVideosSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getYouTubeVideos>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getYouTubeVideos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetYouTubeVideosSuspenseInfiniteQueryOptions(gameModId,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Add one or more YouTube video links to the mod
 * @summary Add YouTube videos
 */
export const addYouTubeVideos = (
    gameModId: number,
    youTubeVideoRequest: YouTubeVideoRequest[], options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseListYouTubeVideoResponse>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/mods/${gameModId}/youtube-videos`,
      youTubeVideoRequest,options
    );
  }



export const getAddYouTubeVideosMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addYouTubeVideos>>, TError,{gameModId: number;data: YouTubeVideoRequest[]}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof addYouTubeVideos>>, TError,{gameModId: number;data: YouTubeVideoRequest[]}, TContext> => {

const mutationKey = ['addYouTubeVideos'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addYouTubeVideos>>, {gameModId: number;data: YouTubeVideoRequest[]}> = (props) => {
          const {gameModId,data} = props ?? {};

          return  addYouTubeVideos(gameModId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddYouTubeVideosMutationResult = NonNullable<Awaited<ReturnType<typeof addYouTubeVideos>>>
    export type AddYouTubeVideosMutationBody = YouTubeVideoRequest[]
    export type AddYouTubeVideosMutationError = AxiosError<unknown>

    /**
 * @summary Add YouTube videos
 */
export const useAddYouTubeVideos = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addYouTubeVideos>>, TError,{gameModId: number;data: YouTubeVideoRequest[]}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addYouTubeVideos>>,
        TError,
        {gameModId: number;data: YouTubeVideoRequest[]},
        TContext
      > => {

      const mutationOptions = getAddYouTubeVideosMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieve all mod images (excluding header)
 * @summary Get mod images
 */
export const getModImages = (
    gameModId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseListImage>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/api/v1/mods/${gameModId}/images/mod`,options
    );
  }


export const getGetModImagesQueryKey = (gameModId?: number,) => {
    return [`http://localhost:8080/api/v1/mods/${gameModId}/images/mod`] as const;
    }

    
export const getGetModImagesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getModImages>>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModImagesQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModImages>>> = ({ signal }) => getModImages(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(gameModId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetModImagesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getModImages>>>
export type GetModImagesInfiniteQueryError = AxiosError<unknown>


export function useGetModImagesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModImages>>,
          TError,
          Awaited<ReturnType<typeof getModImages>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModImagesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModImages>>,
          TError,
          Awaited<ReturnType<typeof getModImages>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModImagesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get mod images
 */

export function useGetModImagesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetModImagesInfiniteQueryOptions(gameModId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetModImagesQueryOptions = <TData = Awaited<ReturnType<typeof getModImages>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModImagesQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModImages>>> = ({ signal }) => getModImages(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(gameModId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetModImagesQueryResult = NonNullable<Awaited<ReturnType<typeof getModImages>>>
export type GetModImagesQueryError = AxiosError<unknown>


export function useGetModImages<TData = Awaited<ReturnType<typeof getModImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModImages>>,
          TError,
          Awaited<ReturnType<typeof getModImages>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModImages<TData = Awaited<ReturnType<typeof getModImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModImages>>,
          TError,
          Awaited<ReturnType<typeof getModImages>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModImages<TData = Awaited<ReturnType<typeof getModImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get mod images
 */

export function useGetModImages<TData = Awaited<ReturnType<typeof getModImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetModImagesQueryOptions(gameModId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetModImagesSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getModImages>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModImagesQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModImages>>> = ({ signal }) => getModImages(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetModImagesSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getModImages>>>
export type GetModImagesSuspenseQueryError = AxiosError<unknown>


export function useGetModImagesSuspense<TData = Awaited<ReturnType<typeof getModImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModImagesSuspense<TData = Awaited<ReturnType<typeof getModImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModImagesSuspense<TData = Awaited<ReturnType<typeof getModImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get mod images
 */

export function useGetModImagesSuspense<TData = Awaited<ReturnType<typeof getModImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetModImagesSuspenseQueryOptions(gameModId,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetModImagesSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getModImages>>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModImagesQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModImages>>> = ({ signal }) => getModImages(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetModImagesSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getModImages>>>
export type GetModImagesSuspenseInfiniteQueryError = AxiosError<unknown>


export function useGetModImagesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModImagesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModImagesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get mod images
 */

export function useGetModImagesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetModImagesSuspenseInfiniteQueryOptions(gameModId,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const uploadModImage = (
    gameModId: number,
    uploadModImageBody: UploadModImageBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseImage>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/mods/${gameModId}/images/mod`,
      uploadModImageBody,options
    );
  }



export const getUploadModImageMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadModImage>>, TError,{gameModId: number;data: UploadModImageBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof uploadModImage>>, TError,{gameModId: number;data: UploadModImageBody}, TContext> => {

const mutationKey = ['uploadModImage'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadModImage>>, {gameModId: number;data: UploadModImageBody}> = (props) => {
          const {gameModId,data} = props ?? {};

          return  uploadModImage(gameModId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadModImageMutationResult = NonNullable<Awaited<ReturnType<typeof uploadModImage>>>
    export type UploadModImageMutationBody = UploadModImageBody
    export type UploadModImageMutationError = AxiosError<unknown>

    export const useUploadModImage = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadModImage>>, TError,{gameModId: number;data: UploadModImageBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof uploadModImage>>,
        TError,
        {gameModId: number;data: UploadModImageBody},
        TContext
      > => {

      const mutationOptions = getUploadModImageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieve the header image for a mod
 * @summary Get header image for mod
 */
export const getHeaderImage = (
    gameModId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseImage>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/api/v1/mods/${gameModId}/images/header`,options
    );
  }


export const getGetHeaderImageQueryKey = (gameModId?: number,) => {
    return [`http://localhost:8080/api/v1/mods/${gameModId}/images/header`] as const;
    }

    
export const getGetHeaderImageInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getHeaderImage>>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHeaderImageQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHeaderImage>>> = ({ signal }) => getHeaderImage(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(gameModId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHeaderImageInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getHeaderImage>>>
export type GetHeaderImageInfiniteQueryError = AxiosError<unknown>


export function useGetHeaderImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHeaderImage>>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHeaderImage>>,
          TError,
          Awaited<ReturnType<typeof getHeaderImage>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHeaderImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHeaderImage>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHeaderImage>>,
          TError,
          Awaited<ReturnType<typeof getHeaderImage>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHeaderImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHeaderImage>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get header image for mod
 */

export function useGetHeaderImageInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHeaderImage>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHeaderImageInfiniteQueryOptions(gameModId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetHeaderImageQueryOptions = <TData = Awaited<ReturnType<typeof getHeaderImage>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHeaderImageQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHeaderImage>>> = ({ signal }) => getHeaderImage(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(gameModId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHeaderImageQueryResult = NonNullable<Awaited<ReturnType<typeof getHeaderImage>>>
export type GetHeaderImageQueryError = AxiosError<unknown>


export function useGetHeaderImage<TData = Awaited<ReturnType<typeof getHeaderImage>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHeaderImage>>,
          TError,
          Awaited<ReturnType<typeof getHeaderImage>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHeaderImage<TData = Awaited<ReturnType<typeof getHeaderImage>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHeaderImage>>,
          TError,
          Awaited<ReturnType<typeof getHeaderImage>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHeaderImage<TData = Awaited<ReturnType<typeof getHeaderImage>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get header image for mod
 */

export function useGetHeaderImage<TData = Awaited<ReturnType<typeof getHeaderImage>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHeaderImageQueryOptions(gameModId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetHeaderImageSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getHeaderImage>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHeaderImageQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHeaderImage>>> = ({ signal }) => getHeaderImage(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHeaderImageSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getHeaderImage>>>
export type GetHeaderImageSuspenseQueryError = AxiosError<unknown>


export function useGetHeaderImageSuspense<TData = Awaited<ReturnType<typeof getHeaderImage>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHeaderImageSuspense<TData = Awaited<ReturnType<typeof getHeaderImage>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHeaderImageSuspense<TData = Awaited<ReturnType<typeof getHeaderImage>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get header image for mod
 */

export function useGetHeaderImageSuspense<TData = Awaited<ReturnType<typeof getHeaderImage>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHeaderImageSuspenseQueryOptions(gameModId,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetHeaderImageSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getHeaderImage>>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHeaderImageQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHeaderImage>>> = ({ signal }) => getHeaderImage(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHeaderImageSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getHeaderImage>>>
export type GetHeaderImageSuspenseInfiniteQueryError = AxiosError<unknown>


export function useGetHeaderImageSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHeaderImage>>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHeaderImageSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHeaderImage>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHeaderImageSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHeaderImage>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get header image for mod
 */

export function useGetHeaderImageSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getHeaderImage>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getHeaderImage>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHeaderImageSuspenseInfiniteQueryOptions(gameModId,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const uploadHeaderImage = (
    gameModId: number,
    uploadHeaderImageBody: UploadHeaderImageBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseImage>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/mods/${gameModId}/images/header`,
      uploadHeaderImageBody,options
    );
  }



export const getUploadHeaderImageMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadHeaderImage>>, TError,{gameModId: number;data: UploadHeaderImageBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof uploadHeaderImage>>, TError,{gameModId: number;data: UploadHeaderImageBody}, TContext> => {

const mutationKey = ['uploadHeaderImage'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadHeaderImage>>, {gameModId: number;data: UploadHeaderImageBody}> = (props) => {
          const {gameModId,data} = props ?? {};

          return  uploadHeaderImage(gameModId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadHeaderImageMutationResult = NonNullable<Awaited<ReturnType<typeof uploadHeaderImage>>>
    export type UploadHeaderImageMutationBody = UploadHeaderImageBody
    export type UploadHeaderImageMutationError = AxiosError<unknown>

    export const useUploadHeaderImage = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadHeaderImage>>, TError,{gameModId: number;data: UploadHeaderImageBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof uploadHeaderImage>>,
        TError,
        {gameModId: number;data: UploadHeaderImageBody},
        TContext
      > => {

      const mutationOptions = getUploadHeaderImageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieve all images associated with a mod
 * @summary Get all images for mod
 */
export const getImages = (
    gameModId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseListImage>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/api/v1/mods/${gameModId}/images`,options
    );
  }


export const getGetImagesQueryKey = (gameModId?: number,) => {
    return [`http://localhost:8080/api/v1/mods/${gameModId}/images`] as const;
    }

    
export const getGetImagesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getImages>>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetImagesQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getImages>>> = ({ signal }) => getImages(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(gameModId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetImagesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getImages>>>
export type GetImagesInfiniteQueryError = AxiosError<unknown>


export function useGetImagesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getImages>>,
          TError,
          Awaited<ReturnType<typeof getImages>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetImagesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getImages>>,
          TError,
          Awaited<ReturnType<typeof getImages>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetImagesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all images for mod
 */

export function useGetImagesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetImagesInfiniteQueryOptions(gameModId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetImagesQueryOptions = <TData = Awaited<ReturnType<typeof getImages>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetImagesQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getImages>>> = ({ signal }) => getImages(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(gameModId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetImagesQueryResult = NonNullable<Awaited<ReturnType<typeof getImages>>>
export type GetImagesQueryError = AxiosError<unknown>


export function useGetImages<TData = Awaited<ReturnType<typeof getImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getImages>>,
          TError,
          Awaited<ReturnType<typeof getImages>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetImages<TData = Awaited<ReturnType<typeof getImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getImages>>,
          TError,
          Awaited<ReturnType<typeof getImages>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetImages<TData = Awaited<ReturnType<typeof getImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all images for mod
 */

export function useGetImages<TData = Awaited<ReturnType<typeof getImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetImagesQueryOptions(gameModId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetImagesSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getImages>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetImagesQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getImages>>> = ({ signal }) => getImages(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetImagesSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getImages>>>
export type GetImagesSuspenseQueryError = AxiosError<unknown>


export function useGetImagesSuspense<TData = Awaited<ReturnType<typeof getImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetImagesSuspense<TData = Awaited<ReturnType<typeof getImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetImagesSuspense<TData = Awaited<ReturnType<typeof getImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all images for mod
 */

export function useGetImagesSuspense<TData = Awaited<ReturnType<typeof getImages>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetImagesSuspenseQueryOptions(gameModId,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetImagesSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getImages>>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetImagesQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getImages>>> = ({ signal }) => getImages(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetImagesSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getImages>>>
export type GetImagesSuspenseInfiniteQueryError = AxiosError<unknown>


export function useGetImagesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetImagesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetImagesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all images for mod
 */

export function useGetImagesSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getImages>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getImages>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetImagesSuspenseInfiniteQueryOptions(gameModId,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete a specific image
 * @summary Delete image
 */
export const deleteImage = (
    gameModId: number,
    imageId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.delete(
      `http://localhost:8080/api/v1/mods/${gameModId}/images/${imageId}`,options
    );
  }



export const getDeleteImageMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteImage>>, TError,{gameModId: number;imageId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteImage>>, TError,{gameModId: number;imageId: number}, TContext> => {

const mutationKey = ['deleteImage'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteImage>>, {gameModId: number;imageId: number}> = (props) => {
          const {gameModId,imageId} = props ?? {};

          return  deleteImage(gameModId,imageId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteImageMutationResult = NonNullable<Awaited<ReturnType<typeof deleteImage>>>
    
    export type DeleteImageMutationError = AxiosError<unknown>

    /**
 * @summary Delete image
 */
export const useDeleteImage = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteImage>>, TError,{gameModId: number;imageId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteImage>>,
        TError,
        {gameModId: number;imageId: number},
        TContext
      > => {

      const mutationOptions = getDeleteImageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    