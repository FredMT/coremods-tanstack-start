/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiResponseCreateModTagResponse,
  ApiResponseVoid,
  CreateModTagRequest
} from '../endpoints.schemas';





export const createTag = (
    modId: number,
    createModTagRequest: CreateModTagRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseCreateModTagResponse>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/mods/${modId}/tags`,
      createModTagRequest,options
    );
  }



export const getCreateTagMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTag>>, TError,{modId: number;data: CreateModTagRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createTag>>, TError,{modId: number;data: CreateModTagRequest}, TContext> => {

const mutationKey = ['createTag'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTag>>, {modId: number;data: CreateModTagRequest}> = (props) => {
          const {modId,data} = props ?? {};

          return  createTag(modId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateTagMutationResult = NonNullable<Awaited<ReturnType<typeof createTag>>>
    export type CreateTagMutationBody = CreateModTagRequest
    export type CreateTagMutationError = AxiosError<unknown>

    export const useCreateTag = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTag>>, TError,{modId: number;data: CreateModTagRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createTag>>,
        TError,
        {modId: number;data: CreateModTagRequest},
        TContext
      > => {

      const mutationOptions = getCreateTagMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const voteForTag = (
    modId: number,
    tagId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/mods/${modId}/tags/${tagId}/vote`,undefined,options
    );
  }



export const getVoteForTagMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof voteForTag>>, TError,{modId: number;tagId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof voteForTag>>, TError,{modId: number;tagId: number}, TContext> => {

const mutationKey = ['voteForTag'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof voteForTag>>, {modId: number;tagId: number}> = (props) => {
          const {modId,tagId} = props ?? {};

          return  voteForTag(modId,tagId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VoteForTagMutationResult = NonNullable<Awaited<ReturnType<typeof voteForTag>>>
    
    export type VoteForTagMutationError = AxiosError<unknown>

    export const useVoteForTag = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof voteForTag>>, TError,{modId: number;tagId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof voteForTag>>,
        TError,
        {modId: number;tagId: number},
        TContext
      > => {

      const mutationOptions = getVoteForTagMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteVoteForTag = (
    modId: number,
    tagId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.delete(
      `http://localhost:8080/api/v1/mods/${modId}/tags/${tagId}/vote`,options
    );
  }



export const getDeleteVoteForTagMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVoteForTag>>, TError,{modId: number;tagId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteVoteForTag>>, TError,{modId: number;tagId: number}, TContext> => {

const mutationKey = ['deleteVoteForTag'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVoteForTag>>, {modId: number;tagId: number}> = (props) => {
          const {modId,tagId} = props ?? {};

          return  deleteVoteForTag(modId,tagId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVoteForTagMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVoteForTag>>>
    
    export type DeleteVoteForTagMutationError = AxiosError<unknown>

    export const useDeleteVoteForTag = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVoteForTag>>, TError,{modId: number;tagId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteVoteForTag>>,
        TError,
        {modId: number;tagId: number},
        TContext
      > => {

      const mutationOptions = getDeleteVoteForTagMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    