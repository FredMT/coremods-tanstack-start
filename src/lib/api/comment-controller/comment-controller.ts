/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiResponseListModCommentResponse,
  ApiResponseModCommentResponse,
  ApiResponseVoid,
  ModCommentRequest,
  ModCommentUpdateRequest
} from '../endpoints.schemas';





export const updateComment = (
    commentId: number,
    modCommentUpdateRequest: ModCommentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseModCommentResponse>> => {
    
    
    return axios.default.put(
      `http://localhost:8080/api/v1/comments/mods/${commentId}`,
      modCommentUpdateRequest,options
    );
  }



export const getUpdateCommentMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateComment>>, TError,{commentId: number;data: ModCommentUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateComment>>, TError,{commentId: number;data: ModCommentUpdateRequest}, TContext> => {

const mutationKey = ['updateComment'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateComment>>, {commentId: number;data: ModCommentUpdateRequest}> = (props) => {
          const {commentId,data} = props ?? {};

          return  updateComment(commentId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCommentMutationResult = NonNullable<Awaited<ReturnType<typeof updateComment>>>
    export type UpdateCommentMutationBody = ModCommentUpdateRequest
    export type UpdateCommentMutationError = AxiosError<unknown>

    export const useUpdateComment = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateComment>>, TError,{commentId: number;data: ModCommentUpdateRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateComment>>,
        TError,
        {commentId: number;data: ModCommentUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCommentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteComment = (
    commentId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.delete(
      `http://localhost:8080/api/v1/comments/mods/${commentId}`,options
    );
  }



export const getDeleteCommentMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{commentId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{commentId: number}, TContext> => {

const mutationKey = ['deleteComment'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteComment>>, {commentId: number}> = (props) => {
          const {commentId} = props ?? {};

          return  deleteComment(commentId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCommentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteComment>>>
    
    export type DeleteCommentMutationError = AxiosError<unknown>

    export const useDeleteComment = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteComment>>, TError,{commentId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteComment>>,
        TError,
        {commentId: number},
        TContext
      > => {

      const mutationOptions = getDeleteCommentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getModComments = (
    gameModId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseListModCommentResponse>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/api/v1/comments/mods/${gameModId}`,options
    );
  }


export const getGetModCommentsQueryKey = (gameModId?: number,) => {
    return [`http://localhost:8080/api/v1/comments/mods/${gameModId}`] as const;
    }

    
export const getGetModCommentsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getModComments>>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModCommentsQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModComments>>> = ({ signal }) => getModComments(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(gameModId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetModCommentsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getModComments>>>
export type GetModCommentsInfiniteQueryError = AxiosError<unknown>


export function useGetModCommentsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModComments>>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModComments>>,
          TError,
          Awaited<ReturnType<typeof getModComments>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModCommentsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModComments>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModComments>>,
          TError,
          Awaited<ReturnType<typeof getModComments>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModCommentsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModComments>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetModCommentsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModComments>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetModCommentsInfiniteQueryOptions(gameModId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetModCommentsQueryOptions = <TData = Awaited<ReturnType<typeof getModComments>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModCommentsQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModComments>>> = ({ signal }) => getModComments(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(gameModId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetModCommentsQueryResult = NonNullable<Awaited<ReturnType<typeof getModComments>>>
export type GetModCommentsQueryError = AxiosError<unknown>


export function useGetModComments<TData = Awaited<ReturnType<typeof getModComments>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModComments>>,
          TError,
          Awaited<ReturnType<typeof getModComments>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModComments<TData = Awaited<ReturnType<typeof getModComments>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getModComments>>,
          TError,
          Awaited<ReturnType<typeof getModComments>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModComments<TData = Awaited<ReturnType<typeof getModComments>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetModComments<TData = Awaited<ReturnType<typeof getModComments>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetModCommentsQueryOptions(gameModId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetModCommentsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getModComments>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModCommentsQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModComments>>> = ({ signal }) => getModComments(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetModCommentsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getModComments>>>
export type GetModCommentsSuspenseQueryError = AxiosError<unknown>


export function useGetModCommentsSuspense<TData = Awaited<ReturnType<typeof getModComments>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModCommentsSuspense<TData = Awaited<ReturnType<typeof getModComments>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModCommentsSuspense<TData = Awaited<ReturnType<typeof getModComments>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetModCommentsSuspense<TData = Awaited<ReturnType<typeof getModComments>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetModCommentsSuspenseQueryOptions(gameModId,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetModCommentsSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getModComments>>>, TError = AxiosError<unknown>>(gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModCommentsQueryKey(gameModId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModComments>>> = ({ signal }) => getModComments(gameModId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetModCommentsSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getModComments>>>
export type GetModCommentsSuspenseInfiniteQueryError = AxiosError<unknown>


export function useGetModCommentsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModComments>>>, TError = AxiosError<unknown>>(
 gameModId: number, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModCommentsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModComments>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetModCommentsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModComments>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetModCommentsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getModComments>>>, TError = AxiosError<unknown>>(
 gameModId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getModComments>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetModCommentsSuspenseInfiniteQueryOptions(gameModId,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createModComment = (
    gameModId: number,
    modCommentRequest: ModCommentRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseModCommentResponse>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/comments/mods/${gameModId}`,
      modCommentRequest,options
    );
  }



export const getCreateModCommentMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createModComment>>, TError,{gameModId: number;data: ModCommentRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createModComment>>, TError,{gameModId: number;data: ModCommentRequest}, TContext> => {

const mutationKey = ['createModComment'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createModComment>>, {gameModId: number;data: ModCommentRequest}> = (props) => {
          const {gameModId,data} = props ?? {};

          return  createModComment(gameModId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateModCommentMutationResult = NonNullable<Awaited<ReturnType<typeof createModComment>>>
    export type CreateModCommentMutationBody = ModCommentRequest
    export type CreateModCommentMutationError = AxiosError<unknown>

    export const useCreateModComment = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createModComment>>, TError,{gameModId: number;data: ModCommentRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createModComment>>,
        TError,
        {gameModId: number;data: ModCommentRequest},
        TContext
      > => {

      const mutationOptions = getCreateModCommentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    