/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryClient,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
    UseSuspenseQueryOptions,
    UseSuspenseQueryResult,
} from '@tanstack/react-query'

import type {
    ApiResponseBugReportPriorityUpdateResponse,
    ApiResponseBugReportResponse,
    ApiResponseBugReportStatusUpdateResponse,
    ApiResponseComment,
    ApiResponseListBugReportResponse,
    ApiResponseVoid,
    CreateBugReportRequest,
    CreateCommentBugReportRequest,
    UpdateBugReportPriorityRequest,
    UpdateBugReportStatusRequest,
} from '../endpoints.schemas'

import { customInstance } from '.././mutator/custom-instance'
import type { ErrorType, BodyType } from '.././mutator/custom-instance'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const updateBugReportStatus = (
    bugReportId: number,
    updateBugReportStatusRequest: BodyType<UpdateBugReportStatusRequest>,
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<ApiResponseBugReportStatusUpdateResponse>(
        {
            url: `http://localhost:8080/api/v1/bug-reports/${bugReportId}/status`,
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            data: updateBugReportStatusRequest,
        },
        options
    )
}

export const getUpdateBugReportStatusMutationOptions = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateBugReportStatus>>,
        TError,
        { bugReportId: number; data: BodyType<UpdateBugReportStatusRequest> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof updateBugReportStatus>>,
    TError,
    { bugReportId: number; data: BodyType<UpdateBugReportStatusRequest> },
    TContext
> => {
    const mutationKey = ['updateBugReportStatus']
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation &&
          'mutationKey' in options.mutation &&
          options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined }

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateBugReportStatus>>,
        { bugReportId: number; data: BodyType<UpdateBugReportStatusRequest> }
    > = (props) => {
        const { bugReportId, data } = props ?? {}

        return updateBugReportStatus(bugReportId, data, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateBugReportStatusMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateBugReportStatus>>
>
export type UpdateBugReportStatusMutationBody =
    BodyType<UpdateBugReportStatusRequest>
export type UpdateBugReportStatusMutationError = ErrorType<unknown>

export const useUpdateBugReportStatus = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof updateBugReportStatus>>,
            TError,
            {
                bugReportId: number
                data: BodyType<UpdateBugReportStatusRequest>
            },
            TContext
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseMutationResult<
    Awaited<ReturnType<typeof updateBugReportStatus>>,
    TError,
    { bugReportId: number; data: BodyType<UpdateBugReportStatusRequest> },
    TContext
> => {
    const mutationOptions = getUpdateBugReportStatusMutationOptions(options)

    return useMutation(mutationOptions, queryClient)
}
export const updateBugReportPriority = (
    bugReportId: number,
    updateBugReportPriorityRequest: BodyType<UpdateBugReportPriorityRequest>,
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<ApiResponseBugReportPriorityUpdateResponse>(
        {
            url: `http://localhost:8080/api/v1/bug-reports/${bugReportId}/priority`,
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            data: updateBugReportPriorityRequest,
        },
        options
    )
}

export const getUpdateBugReportPriorityMutationOptions = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateBugReportPriority>>,
        TError,
        { bugReportId: number; data: BodyType<UpdateBugReportPriorityRequest> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof updateBugReportPriority>>,
    TError,
    { bugReportId: number; data: BodyType<UpdateBugReportPriorityRequest> },
    TContext
> => {
    const mutationKey = ['updateBugReportPriority']
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation &&
          'mutationKey' in options.mutation &&
          options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined }

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateBugReportPriority>>,
        { bugReportId: number; data: BodyType<UpdateBugReportPriorityRequest> }
    > = (props) => {
        const { bugReportId, data } = props ?? {}

        return updateBugReportPriority(bugReportId, data, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type UpdateBugReportPriorityMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateBugReportPriority>>
>
export type UpdateBugReportPriorityMutationBody =
    BodyType<UpdateBugReportPriorityRequest>
export type UpdateBugReportPriorityMutationError = ErrorType<unknown>

export const useUpdateBugReportPriority = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof updateBugReportPriority>>,
            TError,
            {
                bugReportId: number
                data: BodyType<UpdateBugReportPriorityRequest>
            },
            TContext
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseMutationResult<
    Awaited<ReturnType<typeof updateBugReportPriority>>,
    TError,
    { bugReportId: number; data: BodyType<UpdateBugReportPriorityRequest> },
    TContext
> => {
    const mutationOptions = getUpdateBugReportPriorityMutationOptions(options)

    return useMutation(mutationOptions, queryClient)
}
export const getBugReportsByMod = (
    modId: number,
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
) => {
    return customInstance<ApiResponseListBugReportResponse>(
        {
            url: `http://localhost:8080/api/v1/bug-reports/${modId}`,
            method: 'GET',
            signal,
        },
        options
    )
}

export const getGetBugReportsByModQueryKey = (modId?: number) => {
    return [`http://localhost:8080/api/v1/bug-reports/${modId}`] as const
}

export const getGetBugReportsByModQueryOptions = <
    TData = Awaited<ReturnType<typeof getBugReportsByMod>>,
    TError = ErrorType<unknown>,
>(
    modId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getBugReportsByMod>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBugReportsByModQueryKey(modId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBugReportsByMod>>
    > = ({ signal }) => getBugReportsByMod(modId, requestOptions, signal)

    return {
        queryKey,
        queryFn,
        enabled: !!modId,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getBugReportsByMod>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBugReportsByModQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBugReportsByMod>>
>
export type GetBugReportsByModQueryError = ErrorType<unknown>

export function useGetBugReportsByMod<
    TData = Awaited<ReturnType<typeof getBugReportsByMod>>,
    TError = ErrorType<unknown>,
>(
    modId: number,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getBugReportsByMod>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getBugReportsByMod>>,
                    TError,
                    Awaited<ReturnType<typeof getBugReportsByMod>>
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetBugReportsByMod<
    TData = Awaited<ReturnType<typeof getBugReportsByMod>>,
    TError = ErrorType<unknown>,
>(
    modId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getBugReportsByMod>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getBugReportsByMod>>,
                    TError,
                    Awaited<ReturnType<typeof getBugReportsByMod>>
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetBugReportsByMod<
    TData = Awaited<ReturnType<typeof getBugReportsByMod>>,
    TError = ErrorType<unknown>,
>(
    modId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getBugReportsByMod>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetBugReportsByMod<
    TData = Awaited<ReturnType<typeof getBugReportsByMod>>,
    TError = ErrorType<unknown>,
>(
    modId: number,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getBugReportsByMod>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
} {
    const queryOptions = getGetBugReportsByModQueryOptions(modId, options)

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<
        TData,
        TError
    > & { queryKey: DataTag<QueryKey, TData, TError> }

    query.queryKey = queryOptions.queryKey

    return query
}

export const getGetBugReportsByModSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof getBugReportsByMod>>,
    TError = ErrorType<unknown>,
>(
    modId: number,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getBugReportsByMod>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {}

    const queryKey =
        queryOptions?.queryKey ?? getGetBugReportsByModQueryKey(modId)

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getBugReportsByMod>>
    > = ({ signal }) => getBugReportsByMod(modId, requestOptions, signal)

    return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getBugReportsByMod>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBugReportsByModSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBugReportsByMod>>
>
export type GetBugReportsByModSuspenseQueryError = ErrorType<unknown>

export function useGetBugReportsByModSuspense<
    TData = Awaited<ReturnType<typeof getBugReportsByMod>>,
    TError = ErrorType<unknown>,
>(
    modId: number,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getBugReportsByMod>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetBugReportsByModSuspense<
    TData = Awaited<ReturnType<typeof getBugReportsByMod>>,
    TError = ErrorType<unknown>,
>(
    modId: number,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getBugReportsByMod>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetBugReportsByModSuspense<
    TData = Awaited<ReturnType<typeof getBugReportsByMod>>,
    TError = ErrorType<unknown>,
>(
    modId: number,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getBugReportsByMod>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetBugReportsByModSuspense<
    TData = Awaited<ReturnType<typeof getBugReportsByMod>>,
    TError = ErrorType<unknown>,
>(
    modId: number,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof getBugReportsByMod>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
} {
    const queryOptions = getGetBugReportsByModSuspenseQueryOptions(
        modId,
        options
    )

    const query = useSuspenseQuery(
        queryOptions,
        queryClient
    ) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>
    }

    query.queryKey = queryOptions.queryKey

    return query
}

export const createBugReport = (
    modId: number,
    createBugReportRequest: BodyType<CreateBugReportRequest>,
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
) => {
    return customInstance<ApiResponseBugReportResponse>(
        {
            url: `http://localhost:8080/api/v1/bug-reports/${modId}`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: createBugReportRequest,
            signal,
        },
        options
    )
}

export const getCreateBugReportMutationOptions = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createBugReport>>,
        TError,
        { modId: number; data: BodyType<CreateBugReportRequest> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof createBugReport>>,
    TError,
    { modId: number; data: BodyType<CreateBugReportRequest> },
    TContext
> => {
    const mutationKey = ['createBugReport']
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation &&
          'mutationKey' in options.mutation &&
          options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined }

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createBugReport>>,
        { modId: number; data: BodyType<CreateBugReportRequest> }
    > = (props) => {
        const { modId, data } = props ?? {}

        return createBugReport(modId, data, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type CreateBugReportMutationResult = NonNullable<
    Awaited<ReturnType<typeof createBugReport>>
>
export type CreateBugReportMutationBody = BodyType<CreateBugReportRequest>
export type CreateBugReportMutationError = ErrorType<unknown>

export const useCreateBugReport = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof createBugReport>>,
            TError,
            { modId: number; data: BodyType<CreateBugReportRequest> },
            TContext
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseMutationResult<
    Awaited<ReturnType<typeof createBugReport>>,
    TError,
    { modId: number; data: BodyType<CreateBugReportRequest> },
    TContext
> => {
    const mutationOptions = getCreateBugReportMutationOptions(options)

    return useMutation(mutationOptions, queryClient)
}
export const commentBugReport = (
    bugReportId: number,
    createCommentBugReportRequest: BodyType<CreateCommentBugReportRequest>,
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
) => {
    return customInstance<ApiResponseComment>(
        {
            url: `http://localhost:8080/api/v1/bug-reports/${bugReportId}/comment`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: createCommentBugReportRequest,
            signal,
        },
        options
    )
}

export const getCommentBugReportMutationOptions = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof commentBugReport>>,
        TError,
        { bugReportId: number; data: BodyType<CreateCommentBugReportRequest> },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof commentBugReport>>,
    TError,
    { bugReportId: number; data: BodyType<CreateCommentBugReportRequest> },
    TContext
> => {
    const mutationKey = ['commentBugReport']
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation &&
          'mutationKey' in options.mutation &&
          options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined }

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof commentBugReport>>,
        { bugReportId: number; data: BodyType<CreateCommentBugReportRequest> }
    > = (props) => {
        const { bugReportId, data } = props ?? {}

        return commentBugReport(bugReportId, data, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type CommentBugReportMutationResult = NonNullable<
    Awaited<ReturnType<typeof commentBugReport>>
>
export type CommentBugReportMutationBody =
    BodyType<CreateCommentBugReportRequest>
export type CommentBugReportMutationError = ErrorType<unknown>

export const useCommentBugReport = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof commentBugReport>>,
            TError,
            {
                bugReportId: number
                data: BodyType<CreateCommentBugReportRequest>
            },
            TContext
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseMutationResult<
    Awaited<ReturnType<typeof commentBugReport>>,
    TError,
    { bugReportId: number; data: BodyType<CreateCommentBugReportRequest> },
    TContext
> => {
    const mutationOptions = getCommentBugReportMutationOptions(options)

    return useMutation(mutationOptions, queryClient)
}
export const replyToComment = (
    bugReportId: number,
    commentId: number,
    createCommentBugReportRequest: BodyType<CreateCommentBugReportRequest>,
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
) => {
    return customInstance<ApiResponseComment>(
        {
            url: `http://localhost:8080/api/v1/bug-reports/${bugReportId}/comment/${commentId}`,
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            data: createCommentBugReportRequest,
            signal,
        },
        options
    )
}

export const getReplyToCommentMutationOptions = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof replyToComment>>,
        TError,
        {
            bugReportId: number
            commentId: number
            data: BodyType<CreateCommentBugReportRequest>
        },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof replyToComment>>,
    TError,
    {
        bugReportId: number
        commentId: number
        data: BodyType<CreateCommentBugReportRequest>
    },
    TContext
> => {
    const mutationKey = ['replyToComment']
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation &&
          'mutationKey' in options.mutation &&
          options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined }

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof replyToComment>>,
        {
            bugReportId: number
            commentId: number
            data: BodyType<CreateCommentBugReportRequest>
        }
    > = (props) => {
        const { bugReportId, commentId, data } = props ?? {}

        return replyToComment(bugReportId, commentId, data, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type ReplyToCommentMutationResult = NonNullable<
    Awaited<ReturnType<typeof replyToComment>>
>
export type ReplyToCommentMutationBody = BodyType<CreateCommentBugReportRequest>
export type ReplyToCommentMutationError = ErrorType<unknown>

export const useReplyToComment = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof replyToComment>>,
            TError,
            {
                bugReportId: number
                commentId: number
                data: BodyType<CreateCommentBugReportRequest>
            },
            TContext
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseMutationResult<
    Awaited<ReturnType<typeof replyToComment>>,
    TError,
    {
        bugReportId: number
        commentId: number
        data: BodyType<CreateCommentBugReportRequest>
    },
    TContext
> => {
    const mutationOptions = getReplyToCommentMutationOptions(options)

    return useMutation(mutationOptions, queryClient)
}
export const deleteBugReport = (
    bugReportId: number,
    options?: SecondParameter<typeof customInstance>
) => {
    return customInstance<ApiResponseVoid>(
        {
            url: `http://localhost:8080/api/v1/bug-reports/${bugReportId}`,
            method: 'DELETE',
        },
        options
    )
}

export const getDeleteBugReportMutationOptions = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteBugReport>>,
        TError,
        { bugReportId: number },
        TContext
    >
    request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteBugReport>>,
    TError,
    { bugReportId: number },
    TContext
> => {
    const mutationKey = ['deleteBugReport']
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation &&
          'mutationKey' in options.mutation &&
          options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined }

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteBugReport>>,
        { bugReportId: number }
    > = (props) => {
        const { bugReportId } = props ?? {}

        return deleteBugReport(bugReportId, requestOptions)
    }

    return { mutationFn, ...mutationOptions }
}

export type DeleteBugReportMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteBugReport>>
>

export type DeleteBugReportMutationError = ErrorType<unknown>

export const useDeleteBugReport = <
    TError = ErrorType<unknown>,
    TContext = unknown,
>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof deleteBugReport>>,
            TError,
            { bugReportId: number },
            TContext
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseMutationResult<
    Awaited<ReturnType<typeof deleteBugReport>>,
    TError,
    { bugReportId: number },
    TContext
> => {
    const mutationOptions = getDeleteBugReportMutationOptions(options)

    return useMutation(mutationOptions, queryClient)
}
