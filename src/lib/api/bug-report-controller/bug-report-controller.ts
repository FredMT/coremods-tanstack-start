/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiResponseBugReportPriorityUpdateResponse,
  ApiResponseBugReportResponse,
  ApiResponseBugReportStatusUpdateResponse,
  ApiResponseComment,
  ApiResponseListBugReportResponse,
  ApiResponseVoid,
  CreateBugReportRequest,
  CreateCommentBugReportRequest,
  UpdateBugReportPriorityRequest,
  UpdateBugReportStatusRequest
} from '../endpoints.schemas';





export const updateBugReportStatus = (
    bugReportId: number,
    updateBugReportStatusRequest: UpdateBugReportStatusRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseBugReportStatusUpdateResponse>> => {
    
    
    return axios.default.put(
      `http://localhost:8080/api/v1/bug-reports/${bugReportId}/status`,
      updateBugReportStatusRequest,options
    );
  }



export const getUpdateBugReportStatusMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBugReportStatus>>, TError,{bugReportId: number;data: UpdateBugReportStatusRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateBugReportStatus>>, TError,{bugReportId: number;data: UpdateBugReportStatusRequest}, TContext> => {

const mutationKey = ['updateBugReportStatus'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateBugReportStatus>>, {bugReportId: number;data: UpdateBugReportStatusRequest}> = (props) => {
          const {bugReportId,data} = props ?? {};

          return  updateBugReportStatus(bugReportId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateBugReportStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateBugReportStatus>>>
    export type UpdateBugReportStatusMutationBody = UpdateBugReportStatusRequest
    export type UpdateBugReportStatusMutationError = AxiosError<unknown>

    export const useUpdateBugReportStatus = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBugReportStatus>>, TError,{bugReportId: number;data: UpdateBugReportStatusRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateBugReportStatus>>,
        TError,
        {bugReportId: number;data: UpdateBugReportStatusRequest},
        TContext
      > => {

      const mutationOptions = getUpdateBugReportStatusMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const updateBugReportPriority = (
    bugReportId: number,
    updateBugReportPriorityRequest: UpdateBugReportPriorityRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseBugReportPriorityUpdateResponse>> => {
    
    
    return axios.default.put(
      `http://localhost:8080/api/v1/bug-reports/${bugReportId}/priority`,
      updateBugReportPriorityRequest,options
    );
  }



export const getUpdateBugReportPriorityMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBugReportPriority>>, TError,{bugReportId: number;data: UpdateBugReportPriorityRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateBugReportPriority>>, TError,{bugReportId: number;data: UpdateBugReportPriorityRequest}, TContext> => {

const mutationKey = ['updateBugReportPriority'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateBugReportPriority>>, {bugReportId: number;data: UpdateBugReportPriorityRequest}> = (props) => {
          const {bugReportId,data} = props ?? {};

          return  updateBugReportPriority(bugReportId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateBugReportPriorityMutationResult = NonNullable<Awaited<ReturnType<typeof updateBugReportPriority>>>
    export type UpdateBugReportPriorityMutationBody = UpdateBugReportPriorityRequest
    export type UpdateBugReportPriorityMutationError = AxiosError<unknown>

    export const useUpdateBugReportPriority = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBugReportPriority>>, TError,{bugReportId: number;data: UpdateBugReportPriorityRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateBugReportPriority>>,
        TError,
        {bugReportId: number;data: UpdateBugReportPriorityRequest},
        TContext
      > => {

      const mutationOptions = getUpdateBugReportPriorityMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getBugReportsByMod = (
    modId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseListBugReportResponse>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/api/v1/bug-reports/${modId}`,options
    );
  }


export const getGetBugReportsByModQueryKey = (modId?: number,) => {
    return [`http://localhost:8080/api/v1/bug-reports/${modId}`] as const;
    }

    
export const getGetBugReportsByModInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getBugReportsByMod>>>, TError = AxiosError<unknown>>(modId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBugReportsByModQueryKey(modId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBugReportsByMod>>> = ({ signal }) => getBugReportsByMod(modId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(modId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBugReportsByModInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getBugReportsByMod>>>
export type GetBugReportsByModInfiniteQueryError = AxiosError<unknown>


export function useGetBugReportsByModInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getBugReportsByMod>>>, TError = AxiosError<unknown>>(
 modId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBugReportsByMod>>,
          TError,
          Awaited<ReturnType<typeof getBugReportsByMod>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBugReportsByModInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getBugReportsByMod>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBugReportsByMod>>,
          TError,
          Awaited<ReturnType<typeof getBugReportsByMod>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBugReportsByModInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getBugReportsByMod>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBugReportsByModInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getBugReportsByMod>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBugReportsByModInfiniteQueryOptions(modId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetBugReportsByModQueryOptions = <TData = Awaited<ReturnType<typeof getBugReportsByMod>>, TError = AxiosError<unknown>>(modId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBugReportsByModQueryKey(modId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBugReportsByMod>>> = ({ signal }) => getBugReportsByMod(modId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(modId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBugReportsByModQueryResult = NonNullable<Awaited<ReturnType<typeof getBugReportsByMod>>>
export type GetBugReportsByModQueryError = AxiosError<unknown>


export function useGetBugReportsByMod<TData = Awaited<ReturnType<typeof getBugReportsByMod>>, TError = AxiosError<unknown>>(
 modId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBugReportsByMod>>,
          TError,
          Awaited<ReturnType<typeof getBugReportsByMod>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBugReportsByMod<TData = Awaited<ReturnType<typeof getBugReportsByMod>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBugReportsByMod>>,
          TError,
          Awaited<ReturnType<typeof getBugReportsByMod>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBugReportsByMod<TData = Awaited<ReturnType<typeof getBugReportsByMod>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBugReportsByMod<TData = Awaited<ReturnType<typeof getBugReportsByMod>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBugReportsByModQueryOptions(modId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetBugReportsByModSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getBugReportsByMod>>, TError = AxiosError<unknown>>(modId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBugReportsByModQueryKey(modId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBugReportsByMod>>> = ({ signal }) => getBugReportsByMod(modId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBugReportsByModSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getBugReportsByMod>>>
export type GetBugReportsByModSuspenseQueryError = AxiosError<unknown>


export function useGetBugReportsByModSuspense<TData = Awaited<ReturnType<typeof getBugReportsByMod>>, TError = AxiosError<unknown>>(
 modId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBugReportsByModSuspense<TData = Awaited<ReturnType<typeof getBugReportsByMod>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBugReportsByModSuspense<TData = Awaited<ReturnType<typeof getBugReportsByMod>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBugReportsByModSuspense<TData = Awaited<ReturnType<typeof getBugReportsByMod>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBugReportsByModSuspenseQueryOptions(modId,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetBugReportsByModSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getBugReportsByMod>>>, TError = AxiosError<unknown>>(modId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBugReportsByModQueryKey(modId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBugReportsByMod>>> = ({ signal }) => getBugReportsByMod(modId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBugReportsByModSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getBugReportsByMod>>>
export type GetBugReportsByModSuspenseInfiniteQueryError = AxiosError<unknown>


export function useGetBugReportsByModSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getBugReportsByMod>>>, TError = AxiosError<unknown>>(
 modId: number, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBugReportsByModSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getBugReportsByMod>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBugReportsByModSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getBugReportsByMod>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBugReportsByModSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getBugReportsByMod>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getBugReportsByMod>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBugReportsByModSuspenseInfiniteQueryOptions(modId,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createBugReport = (
    modId: number,
    createBugReportRequest: CreateBugReportRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseBugReportResponse>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/bug-reports/${modId}`,
      createBugReportRequest,options
    );
  }



export const getCreateBugReportMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBugReport>>, TError,{modId: number;data: CreateBugReportRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createBugReport>>, TError,{modId: number;data: CreateBugReportRequest}, TContext> => {

const mutationKey = ['createBugReport'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createBugReport>>, {modId: number;data: CreateBugReportRequest}> = (props) => {
          const {modId,data} = props ?? {};

          return  createBugReport(modId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateBugReportMutationResult = NonNullable<Awaited<ReturnType<typeof createBugReport>>>
    export type CreateBugReportMutationBody = CreateBugReportRequest
    export type CreateBugReportMutationError = AxiosError<unknown>

    export const useCreateBugReport = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBugReport>>, TError,{modId: number;data: CreateBugReportRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createBugReport>>,
        TError,
        {modId: number;data: CreateBugReportRequest},
        TContext
      > => {

      const mutationOptions = getCreateBugReportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const commentBugReport = (
    bugReportId: number,
    createCommentBugReportRequest: CreateCommentBugReportRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseComment>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/bug-reports/${bugReportId}/comment`,
      createCommentBugReportRequest,options
    );
  }



export const getCommentBugReportMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commentBugReport>>, TError,{bugReportId: number;data: CreateCommentBugReportRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof commentBugReport>>, TError,{bugReportId: number;data: CreateCommentBugReportRequest}, TContext> => {

const mutationKey = ['commentBugReport'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof commentBugReport>>, {bugReportId: number;data: CreateCommentBugReportRequest}> = (props) => {
          const {bugReportId,data} = props ?? {};

          return  commentBugReport(bugReportId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CommentBugReportMutationResult = NonNullable<Awaited<ReturnType<typeof commentBugReport>>>
    export type CommentBugReportMutationBody = CreateCommentBugReportRequest
    export type CommentBugReportMutationError = AxiosError<unknown>

    export const useCommentBugReport = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commentBugReport>>, TError,{bugReportId: number;data: CreateCommentBugReportRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof commentBugReport>>,
        TError,
        {bugReportId: number;data: CreateCommentBugReportRequest},
        TContext
      > => {

      const mutationOptions = getCommentBugReportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const replyToComment = (
    bugReportId: number,
    commentId: number,
    createCommentBugReportRequest: CreateCommentBugReportRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseComment>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/bug-reports/${bugReportId}/comment/${commentId}`,
      createCommentBugReportRequest,options
    );
  }



export const getReplyToCommentMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof replyToComment>>, TError,{bugReportId: number;commentId: number;data: CreateCommentBugReportRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof replyToComment>>, TError,{bugReportId: number;commentId: number;data: CreateCommentBugReportRequest}, TContext> => {

const mutationKey = ['replyToComment'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof replyToComment>>, {bugReportId: number;commentId: number;data: CreateCommentBugReportRequest}> = (props) => {
          const {bugReportId,commentId,data} = props ?? {};

          return  replyToComment(bugReportId,commentId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReplyToCommentMutationResult = NonNullable<Awaited<ReturnType<typeof replyToComment>>>
    export type ReplyToCommentMutationBody = CreateCommentBugReportRequest
    export type ReplyToCommentMutationError = AxiosError<unknown>

    export const useReplyToComment = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof replyToComment>>, TError,{bugReportId: number;commentId: number;data: CreateCommentBugReportRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof replyToComment>>,
        TError,
        {bugReportId: number;commentId: number;data: CreateCommentBugReportRequest},
        TContext
      > => {

      const mutationOptions = getReplyToCommentMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteBugReport = (
    bugReportId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.delete(
      `http://localhost:8080/api/v1/bug-reports/${bugReportId}`,options
    );
  }



export const getDeleteBugReportMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBugReport>>, TError,{bugReportId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteBugReport>>, TError,{bugReportId: number}, TContext> => {

const mutationKey = ['deleteBugReport'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteBugReport>>, {bugReportId: number}> = (props) => {
          const {bugReportId} = props ?? {};

          return  deleteBugReport(bugReportId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteBugReportMutationResult = NonNullable<Awaited<ReturnType<typeof deleteBugReport>>>
    
    export type DeleteBugReportMutationError = AxiosError<unknown>

    export const useDeleteBugReport = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBugReport>>, TError,{bugReportId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteBugReport>>,
        TError,
        {bugReportId: number},
        TContext
      > => {

      const mutationOptions = getDeleteBugReportMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    