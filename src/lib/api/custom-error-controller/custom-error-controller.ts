/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiResponseVoid
} from '../endpoints.schemas';





export const handleError = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/error`,options
    );
  }


export const getHandleErrorQueryKey = () => {
    return [`http://localhost:8080/error`] as const;
    }

    
export const getHandleErrorInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof handleError>>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHandleErrorQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof handleError>>> = ({ signal }) => handleError({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HandleErrorInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof handleError>>>
export type HandleErrorInfiniteQueryError = AxiosError<unknown>


export function useHandleErrorInfinite<TData = InfiniteData<Awaited<ReturnType<typeof handleError>>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof handleError>>,
          TError,
          Awaited<ReturnType<typeof handleError>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHandleErrorInfinite<TData = InfiniteData<Awaited<ReturnType<typeof handleError>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof handleError>>,
          TError,
          Awaited<ReturnType<typeof handleError>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHandleErrorInfinite<TData = InfiniteData<Awaited<ReturnType<typeof handleError>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useHandleErrorInfinite<TData = InfiniteData<Awaited<ReturnType<typeof handleError>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHandleErrorInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getHandleErrorQueryOptions = <TData = Awaited<ReturnType<typeof handleError>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHandleErrorQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof handleError>>> = ({ signal }) => handleError({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HandleErrorQueryResult = NonNullable<Awaited<ReturnType<typeof handleError>>>
export type HandleErrorQueryError = AxiosError<unknown>


export function useHandleError<TData = Awaited<ReturnType<typeof handleError>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof handleError>>,
          TError,
          Awaited<ReturnType<typeof handleError>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHandleError<TData = Awaited<ReturnType<typeof handleError>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof handleError>>,
          TError,
          Awaited<ReturnType<typeof handleError>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHandleError<TData = Awaited<ReturnType<typeof handleError>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useHandleError<TData = Awaited<ReturnType<typeof handleError>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHandleErrorQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getHandleErrorSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof handleError>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHandleErrorQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof handleError>>> = ({ signal }) => handleError({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HandleErrorSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof handleError>>>
export type HandleErrorSuspenseQueryError = AxiosError<unknown>


export function useHandleErrorSuspense<TData = Awaited<ReturnType<typeof handleError>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHandleErrorSuspense<TData = Awaited<ReturnType<typeof handleError>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHandleErrorSuspense<TData = Awaited<ReturnType<typeof handleError>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useHandleErrorSuspense<TData = Awaited<ReturnType<typeof handleError>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHandleErrorSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getHandleErrorSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof handleError>>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHandleErrorQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof handleError>>> = ({ signal }) => handleError({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HandleErrorSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof handleError>>>
export type HandleErrorSuspenseInfiniteQueryError = AxiosError<unknown>


export function useHandleErrorSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof handleError>>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHandleErrorSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof handleError>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHandleErrorSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof handleError>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useHandleErrorSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof handleError>>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof handleError>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHandleErrorSuspenseInfiniteQueryOptions(options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const handleError2 = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.put(
      `http://localhost:8080/error`,undefined,options
    );
  }



export const getHandleError2MutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleError2>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof handleError2>>, TError,void, TContext> => {

const mutationKey = ['handleError2'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof handleError2>>, void> = () => {
          

          return  handleError2(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type HandleError2MutationResult = NonNullable<Awaited<ReturnType<typeof handleError2>>>
    
    export type HandleError2MutationError = AxiosError<unknown>

    export const useHandleError2 = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleError2>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof handleError2>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getHandleError2MutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const handleError1 = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/error`,undefined,options
    );
  }



export const getHandleError1MutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleError1>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof handleError1>>, TError,void, TContext> => {

const mutationKey = ['handleError1'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof handleError1>>, void> = () => {
          

          return  handleError1(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type HandleError1MutationResult = NonNullable<Awaited<ReturnType<typeof handleError1>>>
    
    export type HandleError1MutationError = AxiosError<unknown>

    export const useHandleError1 = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleError1>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof handleError1>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getHandleError1MutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const handleError3 = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.delete(
      `http://localhost:8080/error`,options
    );
  }



export const getHandleError3MutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleError3>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof handleError3>>, TError,void, TContext> => {

const mutationKey = ['handleError3'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof handleError3>>, void> = () => {
          

          return  handleError3(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type HandleError3MutationResult = NonNullable<Awaited<ReturnType<typeof handleError3>>>
    
    export type HandleError3MutationError = AxiosError<unknown>

    export const useHandleError3 = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleError3>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof handleError3>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getHandleError3MutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const handleError5 = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.head(
      `http://localhost:8080/error`,options
    );
  }



export const getHandleError5MutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleError5>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof handleError5>>, TError,void, TContext> => {

const mutationKey = ['handleError5'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof handleError5>>, void> = () => {
          

          return  handleError5(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type HandleError5MutationResult = NonNullable<Awaited<ReturnType<typeof handleError5>>>
    
    export type HandleError5MutationError = AxiosError<unknown>

    export const useHandleError5 = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleError5>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof handleError5>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getHandleError5MutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const handleError4 = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.patch(
      `http://localhost:8080/error`,undefined,options
    );
  }



export const getHandleError4MutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleError4>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof handleError4>>, TError,void, TContext> => {

const mutationKey = ['handleError4'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof handleError4>>, void> = () => {
          

          return  handleError4(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type HandleError4MutationResult = NonNullable<Awaited<ReturnType<typeof handleError4>>>
    
    export type HandleError4MutationError = AxiosError<unknown>

    export const useHandleError4 = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof handleError4>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof handleError4>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getHandleError4MutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    