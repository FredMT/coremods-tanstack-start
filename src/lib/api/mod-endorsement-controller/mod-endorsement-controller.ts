/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiResponseVoid
} from '../endpoints.schemas';





export const endorseMod = (
    modId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/mods/${modId}/endorsements`,undefined,options
    );
  }



export const getEndorseModMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof endorseMod>>, TError,{modId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof endorseMod>>, TError,{modId: number}, TContext> => {

const mutationKey = ['endorseMod'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof endorseMod>>, {modId: number}> = (props) => {
          const {modId} = props ?? {};

          return  endorseMod(modId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EndorseModMutationResult = NonNullable<Awaited<ReturnType<typeof endorseMod>>>
    
    export type EndorseModMutationError = AxiosError<unknown>

    export const useEndorseMod = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof endorseMod>>, TError,{modId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof endorseMod>>,
        TError,
        {modId: number},
        TContext
      > => {

      const mutationOptions = getEndorseModMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const removeEndorsement = (
    modId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<null>> => {
    
    
    return axios.default.delete(
      `http://localhost:8080/api/v1/mods/${modId}/endorsements`,options
    );
  }



export const getRemoveEndorsementMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeEndorsement>>, TError,{modId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof removeEndorsement>>, TError,{modId: number}, TContext> => {

const mutationKey = ['removeEndorsement'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeEndorsement>>, {modId: number}> = (props) => {
          const {modId} = props ?? {};

          return  removeEndorsement(modId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveEndorsementMutationResult = NonNullable<Awaited<ReturnType<typeof removeEndorsement>>>
    
    export type RemoveEndorsementMutationError = AxiosError<unknown>

    export const useRemoveEndorsement = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeEndorsement>>, TError,{modId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removeEndorsement>>,
        TError,
        {modId: number},
        TContext
      > => {

      const mutationOptions = getRemoveEndorsementMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    