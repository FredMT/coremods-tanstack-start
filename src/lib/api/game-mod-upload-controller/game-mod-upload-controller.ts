/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiResponseVoid,
  ModDetailsRequest,
  ModRequirementsMirrorsRequest
} from '../endpoints.schemas';





export const saveModRequirementsMirrors = (
    modId: number,
    modRequirementsMirrorsRequest: ModRequirementsMirrorsRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/mods/${modId}/upload/requirements-mirrors`,
      modRequirementsMirrorsRequest,options
    );
  }



export const getSaveModRequirementsMirrorsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveModRequirementsMirrors>>, TError,{modId: number;data: ModRequirementsMirrorsRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof saveModRequirementsMirrors>>, TError,{modId: number;data: ModRequirementsMirrorsRequest}, TContext> => {

const mutationKey = ['saveModRequirementsMirrors'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveModRequirementsMirrors>>, {modId: number;data: ModRequirementsMirrorsRequest}> = (props) => {
          const {modId,data} = props ?? {};

          return  saveModRequirementsMirrors(modId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SaveModRequirementsMirrorsMutationResult = NonNullable<Awaited<ReturnType<typeof saveModRequirementsMirrors>>>
    export type SaveModRequirementsMirrorsMutationBody = ModRequirementsMirrorsRequest
    export type SaveModRequirementsMirrorsMutationError = AxiosError<unknown>

    export const useSaveModRequirementsMirrors = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveModRequirementsMirrors>>, TError,{modId: number;data: ModRequirementsMirrorsRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof saveModRequirementsMirrors>>,
        TError,
        {modId: number;data: ModRequirementsMirrorsRequest},
        TContext
      > => {

      const mutationOptions = getSaveModRequirementsMirrorsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const publishMod = (
    modId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/mods/${modId}/publish`,undefined,options
    );
  }



export const getPublishModMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publishMod>>, TError,{modId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof publishMod>>, TError,{modId: number}, TContext> => {

const mutationKey = ['publishMod'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publishMod>>, {modId: number}> = (props) => {
          const {modId} = props ?? {};

          return  publishMod(modId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublishModMutationResult = NonNullable<Awaited<ReturnType<typeof publishMod>>>
    
    export type PublishModMutationError = AxiosError<unknown>

    export const usePublishMod = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publishMod>>, TError,{modId: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publishMod>>,
        TError,
        {modId: number},
        TContext
      > => {

      const mutationOptions = getPublishModMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const saveModDetails = (
    modDetailsRequest: ModDetailsRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/mods/upload/details`,
      modDetailsRequest,options
    );
  }



export const getSaveModDetailsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveModDetails>>, TError,{data: ModDetailsRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof saveModDetails>>, TError,{data: ModDetailsRequest}, TContext> => {

const mutationKey = ['saveModDetails'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof saveModDetails>>, {data: ModDetailsRequest}> = (props) => {
          const {data} = props ?? {};

          return  saveModDetails(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SaveModDetailsMutationResult = NonNullable<Awaited<ReturnType<typeof saveModDetails>>>
    export type SaveModDetailsMutationBody = ModDetailsRequest
    export type SaveModDetailsMutationError = AxiosError<unknown>

    export const useSaveModDetails = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof saveModDetails>>, TError,{data: ModDetailsRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof saveModDetails>>,
        TError,
        {data: ModDetailsRequest},
        TContext
      > => {

      const mutationOptions = getSaveModDetailsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    