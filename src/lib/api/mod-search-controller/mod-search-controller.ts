/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useInfiniteQuery,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiResponseListModSearchResponse,
  SearchModsParams
} from '../endpoints.schemas';





export const searchMods = (
    params: SearchModsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseListModSearchResponse>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/api/v1/mods/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchModsQueryKey = (params?: SearchModsParams,) => {
    return [`http://localhost:8080/api/v1/mods/search`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchModsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof searchMods>>>, TError = AxiosError<unknown>>(params: SearchModsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchModsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchMods>>> = ({ signal }) => searchMods(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchModsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof searchMods>>>
export type SearchModsInfiniteQueryError = AxiosError<unknown>


export function useSearchModsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchMods>>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMods>>,
          TError,
          Awaited<ReturnType<typeof searchMods>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchModsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchMods>>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMods>>,
          TError,
          Awaited<ReturnType<typeof searchMods>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchModsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchMods>>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchModsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchMods>>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchModsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSearchModsQueryOptions = <TData = Awaited<ReturnType<typeof searchMods>>, TError = AxiosError<unknown>>(params: SearchModsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchModsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchMods>>> = ({ signal }) => searchMods(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchModsQueryResult = NonNullable<Awaited<ReturnType<typeof searchMods>>>
export type SearchModsQueryError = AxiosError<unknown>


export function useSearchMods<TData = Awaited<ReturnType<typeof searchMods>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMods>>,
          TError,
          Awaited<ReturnType<typeof searchMods>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchMods<TData = Awaited<ReturnType<typeof searchMods>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchMods>>,
          TError,
          Awaited<ReturnType<typeof searchMods>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchMods<TData = Awaited<ReturnType<typeof searchMods>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchMods<TData = Awaited<ReturnType<typeof searchMods>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchModsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSearchModsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof searchMods>>, TError = AxiosError<unknown>>(params: SearchModsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchModsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchMods>>> = ({ signal }) => searchMods(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchModsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof searchMods>>>
export type SearchModsSuspenseQueryError = AxiosError<unknown>


export function useSearchModsSuspense<TData = Awaited<ReturnType<typeof searchMods>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchModsSuspense<TData = Awaited<ReturnType<typeof searchMods>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchModsSuspense<TData = Awaited<ReturnType<typeof searchMods>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchModsSuspense<TData = Awaited<ReturnType<typeof searchMods>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchModsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSearchModsSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof searchMods>>>, TError = AxiosError<unknown>>(params: SearchModsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchModsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchMods>>> = ({ signal }) => searchMods(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchModsSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof searchMods>>>
export type SearchModsSuspenseInfiniteQueryError = AxiosError<unknown>


export function useSearchModsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchMods>>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchModsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchMods>>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchModsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchMods>>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useSearchModsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchMods>>>, TError = AxiosError<unknown>>(
 params: SearchModsParams, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof searchMods>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchModsSuspenseInfiniteQueryOptions(params,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



