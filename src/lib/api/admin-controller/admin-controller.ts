/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiResponseVoid,
  UpdateUserRoleParams
} from '../endpoints.schemas';





export const updateUserRole = (
    userId: number,
    params: UpdateUserRoleParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.put(
      `http://localhost:8080/api/v1/admin/users/${userId}/role`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getUpdateUserRoleMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserRole>>, TError,{userId: number;params: UpdateUserRoleParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateUserRole>>, TError,{userId: number;params: UpdateUserRoleParams}, TContext> => {

const mutationKey = ['updateUserRole'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserRole>>, {userId: number;params: UpdateUserRoleParams}> = (props) => {
          const {userId,params} = props ?? {};

          return  updateUserRole(userId,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserRoleMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserRole>>>
    
    export type UpdateUserRoleMutationError = AxiosError<unknown>

    export const useUpdateUserRole = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserRole>>, TError,{userId: number;params: UpdateUserRoleParams}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateUserRole>>,
        TError,
        {userId: number;params: UpdateUserRoleParams},
        TContext
      > => {

      const mutationOptions = getUpdateUserRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    