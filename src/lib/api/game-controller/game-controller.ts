/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery, useSuspenseQuery } from '@tanstack/react-query'
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryClient,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
    UseSuspenseQueryOptions,
    UseSuspenseQueryResult,
} from '@tanstack/react-query'

import type {
    ApiResponseListGameSummaryResponse,
    SearchGamesParams,
} from '../endpoints.schemas'

import { customInstance } from '.././mutator/custom-instance'
import type { ErrorType } from '.././mutator/custom-instance'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const searchGames = (
    params: SearchGamesParams,
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
) => {
    return customInstance<ApiResponseListGameSummaryResponse>(
        {
            url: `http://localhost:8080/api/v1/games/search`,
            method: 'GET',
            params,
            signal,
        },
        options
    )
}

export const getSearchGamesQueryKey = (params?: SearchGamesParams) => {
    return [
        `http://localhost:8080/api/v1/games/search`,
        ...(params ? [params] : []),
    ] as const
}

export const getSearchGamesQueryOptions = <
    TData = Awaited<ReturnType<typeof searchGames>>,
    TError = ErrorType<unknown>,
>(
    params: SearchGamesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof searchGames>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getSearchGamesQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchGames>>> = ({
        signal,
    }) => searchGames(params, requestOptions, signal)

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof searchGames>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchGamesQueryResult = NonNullable<
    Awaited<ReturnType<typeof searchGames>>
>
export type SearchGamesQueryError = ErrorType<unknown>

export function useSearchGames<
    TData = Awaited<ReturnType<typeof searchGames>>,
    TError = ErrorType<unknown>,
>(
    params: SearchGamesParams,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof searchGames>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof searchGames>>,
                    TError,
                    Awaited<ReturnType<typeof searchGames>>
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useSearchGames<
    TData = Awaited<ReturnType<typeof searchGames>>,
    TError = ErrorType<unknown>,
>(
    params: SearchGamesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof searchGames>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof searchGames>>,
                    TError,
                    Awaited<ReturnType<typeof searchGames>>
                >,
                'initialData'
            >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useSearchGames<
    TData = Awaited<ReturnType<typeof searchGames>>,
    TError = ErrorType<unknown>,
>(
    params: SearchGamesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof searchGames>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}

export function useSearchGames<
    TData = Awaited<ReturnType<typeof searchGames>>,
    TError = ErrorType<unknown>,
>(
    params: SearchGamesParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof searchGames>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
} {
    const queryOptions = getSearchGamesQueryOptions(params, options)

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<
        TData,
        TError
    > & { queryKey: DataTag<QueryKey, TData, TError> }

    query.queryKey = queryOptions.queryKey

    return query
}

export const getSearchGamesSuspenseQueryOptions = <
    TData = Awaited<ReturnType<typeof searchGames>>,
    TError = ErrorType<unknown>,
>(
    params: SearchGamesParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof searchGames>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    }
) => {
    const { query: queryOptions, request: requestOptions } = options ?? {}

    const queryKey = queryOptions?.queryKey ?? getSearchGamesQueryKey(params)

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchGames>>> = ({
        signal,
    }) => searchGames(params, requestOptions, signal)

    return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof searchGames>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchGamesSuspenseQueryResult = NonNullable<
    Awaited<ReturnType<typeof searchGames>>
>
export type SearchGamesSuspenseQueryError = ErrorType<unknown>

export function useSearchGamesSuspense<
    TData = Awaited<ReturnType<typeof searchGames>>,
    TError = ErrorType<unknown>,
>(
    params: SearchGamesParams,
    options: {
        query: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof searchGames>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useSearchGamesSuspense<
    TData = Awaited<ReturnType<typeof searchGames>>,
    TError = ErrorType<unknown>,
>(
    params: SearchGamesParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof searchGames>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}
export function useSearchGamesSuspense<
    TData = Awaited<ReturnType<typeof searchGames>>,
    TError = ErrorType<unknown>,
>(
    params: SearchGamesParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof searchGames>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
}

export function useSearchGamesSuspense<
    TData = Awaited<ReturnType<typeof searchGames>>,
    TError = ErrorType<unknown>,
>(
    params: SearchGamesParams,
    options?: {
        query?: Partial<
            UseSuspenseQueryOptions<
                Awaited<ReturnType<typeof searchGames>>,
                TError,
                TData
            >
        >
        request?: SecondParameter<typeof customInstance>
    },
    queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
} {
    const queryOptions = getSearchGamesSuspenseQueryOptions(params, options)

    const query = useSuspenseQuery(
        queryOptions,
        queryClient
    ) as UseSuspenseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>
    }

    query.queryKey = queryOptions.queryKey

    return query
}
