/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery,
  useSuspenseInfiniteQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseInfiniteQueryOptions,
  UseSuspenseInfiniteQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ApiResponseModPermissions,
  ApiResponseVoid,
  CreateOrUpdateModPermissionsRequest
} from '../endpoints.schemas';





export const getLatestModPermissions = (
    modId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseModPermissions>> => {
    
    
    return axios.default.get(
      `http://localhost:8080/api/v1/mods/${modId}/permissions`,options
    );
  }


export const getGetLatestModPermissionsQueryKey = (modId?: number,) => {
    return [`http://localhost:8080/api/v1/mods/${modId}/permissions`] as const;
    }

    
export const getGetLatestModPermissionsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getLatestModPermissions>>>, TError = AxiosError<unknown>>(modId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLatestModPermissionsQueryKey(modId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLatestModPermissions>>> = ({ signal }) => getLatestModPermissions(modId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(modId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLatestModPermissionsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getLatestModPermissions>>>
export type GetLatestModPermissionsInfiniteQueryError = AxiosError<unknown>


export function useGetLatestModPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getLatestModPermissions>>>, TError = AxiosError<unknown>>(
 modId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLatestModPermissions>>,
          TError,
          Awaited<ReturnType<typeof getLatestModPermissions>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestModPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getLatestModPermissions>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLatestModPermissions>>,
          TError,
          Awaited<ReturnType<typeof getLatestModPermissions>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestModPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getLatestModPermissions>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetLatestModPermissionsInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getLatestModPermissions>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLatestModPermissionsInfiniteQueryOptions(modId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetLatestModPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getLatestModPermissions>>, TError = AxiosError<unknown>>(modId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLatestModPermissionsQueryKey(modId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLatestModPermissions>>> = ({ signal }) => getLatestModPermissions(modId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(modId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLatestModPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getLatestModPermissions>>>
export type GetLatestModPermissionsQueryError = AxiosError<unknown>


export function useGetLatestModPermissions<TData = Awaited<ReturnType<typeof getLatestModPermissions>>, TError = AxiosError<unknown>>(
 modId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLatestModPermissions>>,
          TError,
          Awaited<ReturnType<typeof getLatestModPermissions>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestModPermissions<TData = Awaited<ReturnType<typeof getLatestModPermissions>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getLatestModPermissions>>,
          TError,
          Awaited<ReturnType<typeof getLatestModPermissions>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestModPermissions<TData = Awaited<ReturnType<typeof getLatestModPermissions>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetLatestModPermissions<TData = Awaited<ReturnType<typeof getLatestModPermissions>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLatestModPermissionsQueryOptions(modId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetLatestModPermissionsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getLatestModPermissions>>, TError = AxiosError<unknown>>(modId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLatestModPermissionsQueryKey(modId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLatestModPermissions>>> = ({ signal }) => getLatestModPermissions(modId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLatestModPermissionsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getLatestModPermissions>>>
export type GetLatestModPermissionsSuspenseQueryError = AxiosError<unknown>


export function useGetLatestModPermissionsSuspense<TData = Awaited<ReturnType<typeof getLatestModPermissions>>, TError = AxiosError<unknown>>(
 modId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestModPermissionsSuspense<TData = Awaited<ReturnType<typeof getLatestModPermissions>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestModPermissionsSuspense<TData = Awaited<ReturnType<typeof getLatestModPermissions>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetLatestModPermissionsSuspense<TData = Awaited<ReturnType<typeof getLatestModPermissions>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLatestModPermissionsSuspenseQueryOptions(modId,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetLatestModPermissionsSuspenseInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getLatestModPermissions>>>, TError = AxiosError<unknown>>(modId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLatestModPermissionsQueryKey(modId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLatestModPermissions>>> = ({ signal }) => getLatestModPermissions(modId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetLatestModPermissionsSuspenseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getLatestModPermissions>>>
export type GetLatestModPermissionsSuspenseInfiniteQueryError = AxiosError<unknown>


export function useGetLatestModPermissionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getLatestModPermissions>>>, TError = AxiosError<unknown>>(
 modId: number, options: { query:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestModPermissionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getLatestModPermissions>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetLatestModPermissionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getLatestModPermissions>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetLatestModPermissionsSuspenseInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getLatestModPermissions>>>, TError = AxiosError<unknown>>(
 modId: number, options?: { query?:Partial<UseSuspenseInfiniteQueryOptions<Awaited<ReturnType<typeof getLatestModPermissions>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetLatestModPermissionsSuspenseInfiniteQueryOptions(modId,options)

  const query = useSuspenseInfiniteQuery(queryOptions , queryClient) as  UseSuspenseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateModPermissions = (
    modId: number,
    createOrUpdateModPermissionsRequest: CreateOrUpdateModPermissionsRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.put(
      `http://localhost:8080/api/v1/mods/${modId}/permissions`,
      createOrUpdateModPermissionsRequest,options
    );
  }



export const getUpdateModPermissionsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateModPermissions>>, TError,{modId: number;data: CreateOrUpdateModPermissionsRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateModPermissions>>, TError,{modId: number;data: CreateOrUpdateModPermissionsRequest}, TContext> => {

const mutationKey = ['updateModPermissions'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateModPermissions>>, {modId: number;data: CreateOrUpdateModPermissionsRequest}> = (props) => {
          const {modId,data} = props ?? {};

          return  updateModPermissions(modId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateModPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof updateModPermissions>>>
    export type UpdateModPermissionsMutationBody = CreateOrUpdateModPermissionsRequest
    export type UpdateModPermissionsMutationError = AxiosError<unknown>

    export const useUpdateModPermissions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateModPermissions>>, TError,{modId: number;data: CreateOrUpdateModPermissionsRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateModPermissions>>,
        TError,
        {modId: number;data: CreateOrUpdateModPermissionsRequest},
        TContext
      > => {

      const mutationOptions = getUpdateModPermissionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const createModPermissions = (
    modId: number,
    createOrUpdateModPermissionsRequest: CreateOrUpdateModPermissionsRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    
    return axios.default.post(
      `http://localhost:8080/api/v1/mods/${modId}/permissions`,
      createOrUpdateModPermissionsRequest,options
    );
  }



export const getCreateModPermissionsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createModPermissions>>, TError,{modId: number;data: CreateOrUpdateModPermissionsRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createModPermissions>>, TError,{modId: number;data: CreateOrUpdateModPermissionsRequest}, TContext> => {

const mutationKey = ['createModPermissions'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createModPermissions>>, {modId: number;data: CreateOrUpdateModPermissionsRequest}> = (props) => {
          const {modId,data} = props ?? {};

          return  createModPermissions(modId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateModPermissionsMutationResult = NonNullable<Awaited<ReturnType<typeof createModPermissions>>>
    export type CreateModPermissionsMutationBody = CreateOrUpdateModPermissionsRequest
    export type CreateModPermissionsMutationError = AxiosError<unknown>

    export const useCreateModPermissions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createModPermissions>>, TError,{modId: number;data: CreateOrUpdateModPermissionsRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createModPermissions>>,
        TError,
        {modId: number;data: CreateOrUpdateModPermissionsRequest},
        TContext
      > => {

      const mutationOptions = getCreateModPermissionsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    