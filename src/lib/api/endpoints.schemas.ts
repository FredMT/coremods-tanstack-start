/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
export interface CreateOrUpdateModPermissionsRequest {
  useCustomPermissions: boolean;
  customPermissionInstructions?: string;
  hasRestrictedAssetsFromOthers?: boolean;
  uploadToOtherSites?: string;
  convertToOtherGames?: string;
  modifyAndReupload?: string;
  useAssetsInOwnFiles?: string;
  restrictCommercialUse?: boolean;
  credits?: string;
}

export interface ApiResponseVoid {
  message?: string;
  data?: unknown;
}

export interface ModFileEditRequest {
  /**
   * @minLength 0
   * @maxLength 50
   */
  name?: string;
  /**
   * @minLength 0
   * @maxLength 50
   */
  version?: string;
  category?: string;
  /**
   * @minLength 0
   * @maxLength 255
   */
  description?: string;
}

export interface ApiResponseModFileEditResponse {
  message?: string;
  data?: ModFileEditResponse;
}

export type ModFileEditResponseCategory = typeof ModFileEditResponseCategory[keyof typeof ModFileEditResponseCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModFileEditResponseCategory = {
  MAIN_FILES: 'MAIN_FILES',
  UPDATES: 'UPDATES',
  OPTIONAL_FILES: 'OPTIONAL_FILES',
  OLD_VERSIONS: 'OLD_VERSIONS',
  MISCELLANEOUS: 'MISCELLANEOUS',
  ARCHIVE: 'ARCHIVE',
} as const;

export interface ModFileEditResponse {
  id?: number;
  name?: string;
  version?: string;
  category?: ModFileEditResponseCategory;
  description?: string;
  updatedAt?: string;
}

export interface YouTubeVideoUpdateRequest {
  /** @minLength 1 */
  title: string;
  description?: string;
}

export interface ApiResponseYouTubeVideoResponse {
  message?: string;
  data?: YouTubeVideoResponse;
}

export interface YouTubeVideoResponse {
  id?: number;
  identifier?: string;
  title?: string;
  description?: string;
  displayOrder?: number;
  createdTime?: string;
}

export interface ModCommentUpdateRequest {
  /** @minLength 1 */
  content: string;
}

export interface ApiResponseModCommentResponse {
  message?: string;
  data?: ModCommentResponse;
}

export interface ModCommentResponse {
  id?: number;
  content?: string;
  username?: string;
  parentId?: number;
  createdAt?: string;
  updatedAt?: string;
  updated?: boolean;
  deleted?: boolean;
}

export interface UpdateBugReportStatusRequest {
  status: string;
}

export interface ApiResponseBugReportStatusUpdateResponse {
  message?: string;
  data?: BugReportStatusUpdateResponse;
}

export type BugReportStatusUpdateResponseStatus = typeof BugReportStatusUpdateResponseStatus[keyof typeof BugReportStatusUpdateResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BugReportStatusUpdateResponseStatus = {
  NEW_ISSUE: 'NEW_ISSUE',
  BEING_LOOKED_AT: 'BEING_LOOKED_AT',
  FIXED: 'FIXED',
  KNOWN_ISSUES: 'KNOWN_ISSUES',
  DUPLICATES: 'DUPLICATES',
  NOT_A_BUG: 'NOT_A_BUG',
  WONT_FIX: 'WONT_FIX',
  NEED_MORE_INFO: 'NEED_MORE_INFO',
  CLOSED: 'CLOSED',
} as const;

export interface BugReportStatusUpdateResponse {
  bugReportId?: number;
  status?: BugReportStatusUpdateResponseStatus;
}

export interface UpdateBugReportPriorityRequest {
  priority: string;
}

export interface ApiResponseBugReportPriorityUpdateResponse {
  message?: string;
  data?: BugReportPriorityUpdateResponse;
}

export type BugReportPriorityUpdateResponsePriority = typeof BugReportPriorityUpdateResponsePriority[keyof typeof BugReportPriorityUpdateResponsePriority];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BugReportPriorityUpdateResponsePriority = {
  NOT_SET: 'NOT_SET',
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
} as const;

export interface BugReportPriorityUpdateResponse {
  bugReportId?: number;
  priority?: BugReportPriorityUpdateResponsePriority;
}

export interface GrantedAuthority {
  authority?: string;
}

export type UserRole = typeof UserRole[keyof typeof UserRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  USER: 'USER',
  MODERATOR: 'MODERATOR',
  ADMIN: 'ADMIN',
} as const;

export interface User {
  id?: number;
  /**
   * @minLength 4
   * @maxLength 12
   */
  username: string;
  /** @minLength 1 */
  email: string;
  role?: UserRole;
  emailVerified?: boolean;
  enabled?: boolean;
  accountNonExpired?: boolean;
  accountNonLocked?: boolean;
  credentialsNonExpired?: boolean;
  createdAt?: string;
  updatedAt?: string;
  authorities?: GrantedAuthority[];
}

export type GameModModType = typeof GameModModType[keyof typeof GameModModType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GameModModType = {
  MOD: 'MOD',
  TRANSLATION: 'TRANSLATION',
} as const;

export type GameModStatus = typeof GameModStatus[keyof typeof GameModStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GameModStatus = {
  DRAFT: 'DRAFT',
  PENDING_REVIEW: 'PENDING_REVIEW',
  PUBLISHED: 'PUBLISHED',
  REJECTED: 'REJECTED',
} as const;

export interface GameMod {
  id?: number;
  game: IgdbGame;
  modType: GameModModType;
  category?: GameModCategory;
  suggestedCategory?: string;
  /** @minLength 1 */
  name: string;
  language?: string;
  /** @minLength 1 */
  version: string;
  author: User;
  overview?: string;
  /** @minLength 1 */
  description: string;
  hasNudity?: boolean;
  hasSkimpyOutfits?: boolean;
  hasExtremeViolence?: boolean;
  hasProfanity?: boolean;
  hasRealWorldReferences?: boolean;
  includesVisualPreset?: boolean;
  hasSaveFiles?: boolean;
  hasTranslationFiles?: boolean;
  status?: GameModStatus;
  createdAt?: string;
  updatedAt?: string;
  characterPreset?: boolean;
  published?: boolean;
  sexualized?: boolean;
}

export interface GameModCategory {
  id?: number;
  game?: IgdbGame;
  categoryName?: string;
  approved?: boolean;
  parent?: GameModCategory;
  createdAt?: string;
  updatedAt?: string;
  subcategory?: boolean;
  rootCategory?: boolean;
}

export interface IgdbGame {
  id?: number;
  name?: string;
  slug?: string;
  updatedAtIgdb?: number;
  coverImageId?: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface ExternalRequirement {
  name?: string;
  url?: string;
  notes?: string;
}

export interface ModMirror {
  mirrorName?: string;
  mirrorUrl?: string;
}

export interface ModRequirementsMirrorsRequest {
  dlcIds?: number[];
  siteMods?: SiteModRequirement[];
  externalRequirements?: ExternalRequirement[];
  modMirrors?: ModMirror[];
}

export interface SiteModRequirement {
  modId?: number;
  requirementNotes?: string;
}

export interface CreateModTagRequest {
  /**
   * @minLength 2
   * @maxLength 50
   * @pattern ^[a-zA-Z0-9-_]+$
   */
  tag: string;
}

export interface ApiResponseCreateModTagResponse {
  message?: string;
  data?: CreateModTagResponse;
}

export interface CreateModTagResponse {
  id?: number;
  modId?: number;
  tag?: string;
}

export interface ApiResponseModFileUploadResponse {
  message?: string;
  data?: ModFileUploadResponse;
}

export type ModFileUploadResponseValidationResult = {[key: string]: unknown};

export interface ModFileUploadResponse {
  progressId?: string;
  validationResult?: ModFileUploadResponseValidationResult;
  status?: string;
}

export interface YouTubeVideoRequest {
  /** @minLength 1 */
  youtubeUrl: string;
  /** @minLength 1 */
  title: string;
  description?: string;
  /** @minimum 1 */
  displayOrder: number;
}

export interface ApiResponseListYouTubeVideoResponse {
  message?: string;
  data?: YouTubeVideoResponse[];
}

export interface ApiResponseImage {
  message?: string;
  data?: Image;
}

export type ImageImageType = typeof ImageImageType[keyof typeof ImageImageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageImageType = {
  HEADER: 'HEADER',
  MOD_IMAGE: 'MOD_IMAGE',
} as const;

export interface Image {
  id?: number;
  /** @minLength 1 */
  imageableType: string;
  imageableId: number;
  /** @minLength 1 */
  storageKey: string;
  imageType: ImageImageType;
  fileSize?: number;
  displayOrder?: number;
  createdTime?: string;
}

export interface ModDetailsRequest {
  gameId: number;
  /** @minLength 1 */
  modType: string;
  categoryId: number;
  suggestedCategory?: string;
  /** @minLength 1 */
  name: string;
  language?: string;
  /** @minLength 1 */
  version: string;
  /**
   * @minLength 1
   * @maxLength 350
   */
  overview?: string;
  /** @minLength 1 */
  description: string;
  hasNudity?: boolean;
  hasSkimpyOutfits?: boolean;
  hasExtremeViolence?: boolean;
  hasProfanity?: boolean;
  hasRealWorldReferences?: boolean;
  includesVisualPreset?: boolean;
  hasSaveFiles?: boolean;
  hasTranslationFiles?: boolean;
  characterPreset?: boolean;
  sexualized?: boolean;
}

export interface ModCommentRequest {
  /** @minLength 1 */
  content: string;
  parentId?: number;
}

export interface CreateBugReportRequest {
  /**
   * @minLength 0
   * @maxLength 255
   */
  title: string;
  /**
   * @minLength 0
   * @maxLength 5000
   */
  description: string;
}

export interface ApiResponseBugReportResponse {
  message?: string;
  data?: BugReportResponse;
}

export type BugReportResponseStatus = typeof BugReportResponseStatus[keyof typeof BugReportResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BugReportResponseStatus = {
  NEW_ISSUE: 'NEW_ISSUE',
  BEING_LOOKED_AT: 'BEING_LOOKED_AT',
  FIXED: 'FIXED',
  KNOWN_ISSUES: 'KNOWN_ISSUES',
  DUPLICATES: 'DUPLICATES',
  NOT_A_BUG: 'NOT_A_BUG',
  WONT_FIX: 'WONT_FIX',
  NEED_MORE_INFO: 'NEED_MORE_INFO',
  CLOSED: 'CLOSED',
} as const;

export type BugReportResponsePriority = typeof BugReportResponsePriority[keyof typeof BugReportResponsePriority];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BugReportResponsePriority = {
  NOT_SET: 'NOT_SET',
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
} as const;

export interface BugReportResponse {
  id?: number;
  userId?: number;
  username?: string;
  modId?: number;
  modName?: string;
  title?: string;
  description?: string;
  status?: BugReportResponseStatus;
  priority?: BugReportResponsePriority;
  bugStatusOpen?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface CreateCommentBugReportRequest {
  /** @minLength 1 */
  content: string;
}

export interface ApiResponseComment {
  message?: string;
  data?: Comment;
}

export type BugReportStatus = typeof BugReportStatus[keyof typeof BugReportStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BugReportStatus = {
  NEW_ISSUE: 'NEW_ISSUE',
  BEING_LOOKED_AT: 'BEING_LOOKED_AT',
  FIXED: 'FIXED',
  KNOWN_ISSUES: 'KNOWN_ISSUES',
  DUPLICATES: 'DUPLICATES',
  NOT_A_BUG: 'NOT_A_BUG',
  WONT_FIX: 'WONT_FIX',
  NEED_MORE_INFO: 'NEED_MORE_INFO',
  CLOSED: 'CLOSED',
} as const;

export type BugReportPriority = typeof BugReportPriority[keyof typeof BugReportPriority];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BugReportPriority = {
  NOT_SET: 'NOT_SET',
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
} as const;

export interface BugReport {
  id?: number;
  user: User;
  mod: GameMod;
  /**
   * @minLength 0
   * @maxLength 255
   */
  title: string;
  /**
   * @minLength 0
   * @maxLength 5000
   */
  description: string;
  status?: BugReportStatus;
  priority?: BugReportPriority;
  bugStatusOpen?: boolean;
  createdAt?: string;
  updatedAt?: string;
  comments?: Comment[];
  closed?: boolean;
  open?: boolean;
}

export interface Comment {
  id?: number;
  /** @minLength 1 */
  commentableType: string;
  commentableId: number;
  user: User;
  /** @minLength 1 */
  content: string;
  parentId?: number;
  parentType?: string;
  commentParent?: Comment;
  bugReportParent?: BugReport;
  deletedAt?: string;
  createdAt?: string;
  updatedAt?: string;
  updated?: boolean;
  deleted?: boolean;
}

export interface ResetPasswordRequest {
  /** @minLength 1 */
  currentPassword: string;
  /**
   * @minLength 8
   * @maxLength 2147483647
   */
  newPassword: string;
  /** @minLength 1 */
  confirmNewPassword: string;
}

export type ApiResponseMapStringObjectData = {[key: string]: unknown};

export interface ApiResponseMapStringObject {
  message?: string;
  data?: ApiResponseMapStringObjectData;
}

export interface RegisterRequest {
  /**
   * @minLength 4
   * @maxLength 12
   */
  username: string;
  /** @minLength 1 */
  email: string;
  /**
   * @minLength 8
   * @maxLength 2147483647
   */
  password: string;
  /** @minLength 1 */
  confirmPassword: string;
}

export interface ForgotPasswordRequest {
  /** @minLength 1 */
  email: string;
}

export interface ForgotPasswordResetRequest {
  /** @minLength 1 */
  token: string;
  /**
   * @minLength 8
   * @maxLength 2147483647
   */
  newPassword: string;
  /** @minLength 1 */
  confirmNewPassword: string;
}

export interface CsrfToken {
  parameterName?: string;
  token?: string;
  headerName?: string;
}

export interface SseEmitter {
  timeout?: number;
}

export interface ApiResponseModPermissions {
  message?: string;
  data?: ModPermissions;
}

export type ModPermissionsUploadToOtherSites = typeof ModPermissionsUploadToOtherSites[keyof typeof ModPermissionsUploadToOtherSites];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModPermissionsUploadToOtherSites = {
  YES_CREDIT: 'YES_CREDIT',
  NO: 'NO',
} as const;

export type ModPermissionsConvertToOtherGames = typeof ModPermissionsConvertToOtherGames[keyof typeof ModPermissionsConvertToOtherGames];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModPermissionsConvertToOtherGames = {
  YES_CREDIT: 'YES_CREDIT',
  NO: 'NO',
} as const;

export type ModPermissionsModifyAndReupload = typeof ModPermissionsModifyAndReupload[keyof typeof ModPermissionsModifyAndReupload];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModPermissionsModifyAndReupload = {
  YES_NO_CREDIT: 'YES_NO_CREDIT',
  YES_CREDIT: 'YES_CREDIT',
  NOT_WITHOUT_PERMISSION: 'NOT_WITHOUT_PERMISSION',
  ABSOLUTELY_NOT: 'ABSOLUTELY_NOT',
} as const;

export type ModPermissionsUseAssetsInOwnFiles = typeof ModPermissionsUseAssetsInOwnFiles[keyof typeof ModPermissionsUseAssetsInOwnFiles];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModPermissionsUseAssetsInOwnFiles = {
  YES_NO_CREDIT: 'YES_NO_CREDIT',
  YES_CREDIT: 'YES_CREDIT',
  NOT_WITHOUT_PERMISSION: 'NOT_WITHOUT_PERMISSION',
  ABSOLUTELY_NOT: 'ABSOLUTELY_NOT',
} as const;

export interface ModPermissions {
  id?: number;
  mod?: GameMod;
  versionNumber?: number;
  isLatest?: boolean;
  useCustomPermissions?: boolean;
  customPermissionInstructions?: string;
  hasRestrictedAssetsFromOthers?: boolean;
  uploadToOtherSites?: ModPermissionsUploadToOtherSites;
  convertToOtherGames?: ModPermissionsConvertToOtherGames;
  modifyAndReupload?: ModPermissionsModifyAndReupload;
  useAssetsInOwnFiles?: ModPermissionsUseAssetsInOwnFiles;
  restrictCommercialUse?: boolean;
  credits?: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface ApiResponseListImage {
  message?: string;
  data?: Image[];
}

export interface ApiResponseListModSearchResponse {
  message?: string;
  data?: ModSearchResponse[];
}

export interface ModSearchResponse {
  id?: number;
  name?: string;
  description?: string;
  version?: string;
  gameId?: number;
  gameName?: string;
  gameCoverImageId?: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface ApiResponseListDLCResponse {
  message?: string;
  data?: DLCResponse[];
}

export interface DLCResponse {
  id?: number;
  name?: string;
}

export interface ApiResponseListGameSummaryResponse {
  message?: string;
  data?: GameSummaryResponse[];
}

/**
 * Cover image information
 */
export interface Cover {
  /** ID of the cover image */
  image_id?: string;
}

/**
 * Simplified response containing essential game information.
 */
export interface GameSummaryResponse {
  /** Unique ID of the game */
  id?: number;
  /** Name of the game */
  name?: string;
  /** Optional cover image details */
  cover?: Cover;
}

export interface ApiResponseListModCommentResponse {
  message?: string;
  data?: ModCommentResponse[];
}

export interface ApiResponseListBugReportResponse {
  message?: string;
  data?: BugReportResponse[];
}

export type UpdateUserRoleParams = {
role: UpdateUserRoleRole;
};

export type UpdateUserRoleRole = typeof UpdateUserRoleRole[keyof typeof UpdateUserRoleRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserRoleRole = {
  USER: 'USER',
  MODERATOR: 'MODERATOR',
  ADMIN: 'ADMIN',
} as const;

export type UploadModFileParams = {
fileName: string;
fileVersion: string;
fileCategory: UploadModFileFileCategory;
fileDescription?: string;
isNewVersionOfExistingFile: boolean;
fileId?: number;
removePreviousFileVersion?: boolean;
};

export type UploadModFileFileCategory = typeof UploadModFileFileCategory[keyof typeof UploadModFileFileCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UploadModFileFileCategory = {
  MAIN_FILES: 'MAIN_FILES',
  UPDATES: 'UPDATES',
  OPTIONAL_FILES: 'OPTIONAL_FILES',
  OLD_VERSIONS: 'OLD_VERSIONS',
  MISCELLANEOUS: 'MISCELLANEOUS',
  ARCHIVE: 'ARCHIVE',
} as const;

export type UploadModFileBody = {
  archiveFile: Blob;
};

export type UploadModImageBody = {
  /** Mod image file */
  file: Blob;
};

export type UploadHeaderImageBody = {
  /** Header image file */
  file: Blob;
};

export type VerifyEmailParams = {
token: string;
};

export type ResendVerificationParams = {
email: string;
};

export type CsrfParams = {
csrfToken: CsrfToken;
};

export type SearchModsParams = {
q: string;
};

export type SearchGamesParams = {
q: string;
};

